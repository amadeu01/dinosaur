//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class DefaultAPI: APIBase {
    /**

     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter electedGt: (query) Boolean data. Ex: True (optional)
     - parameter electedYear: (query) Boolean data. Ex: True (optional)
     - parameter electedMonth: (query) Boolean data. Ex: True (optional)
     - parameter electedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter electedSecond: (query) Boolean data. Ex: True (optional)
     - parameter electedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter electedIn: (query) Boolean data. Ex: True (optional)
     - parameter electedRegex: (query) Boolean data. Ex: True (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func candidaciesGet(limit: Int32? = nil, offset: Int32? = nil, electedGt: Bool? = nil, electedYear: Bool? = nil, electedMonth: Bool? = nil, electedIsnull: Bool? = nil, electedSecond: Bool? = nil, electedWeekDay: Bool? = nil, electedIn: Bool? = nil, electedRegex: Bool? = nil, completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        candidaciesGetWithRequestBuilder(limit: limit, offset: offset, electedGt: electedGt, electedYear: electedYear, electedMonth: electedMonth, electedIsnull: electedIsnull, electedSecond: electedSecond, electedWeekDay: electedWeekDay, electedIn: electedIn, electedRegex: electedRegex).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /candidacies
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "elected" : true,
    "institution" : {
      "website" : "aeiou",
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "political_offices" : [ {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "term" : "",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      } ]
    },
    "political_office" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "term" : "",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    },
    "city" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "state" : {
        "country" : {
          "siglum" : "aeiou",
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "logo" : "aeiou",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        },
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      }
    },
    "election_round" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "round_number" : "",
      "election" : "aeiou",
      "resource_uri" : "aeiou",
      "id" : 123456789
    },
    "resource_uri" : "aeiou",
    "politician" : {
      "website" : "aeiou",
      "education" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789
      },
      "occupation" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789,
        "slug" : "aeiou"
      },
      "ethnicity" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : "",
        "slug" : "aeiou"
      },
      "gender" : "aeiou",
      "date_of_birth" : "2000-01-23T04:56:07.000+00:00",
      "political_parties" : [ {
        "date_start" : "2000-01-23T04:56:07.000+00:00",
        "resource_uri" : "aeiou",
        "date_end" : "2000-01-23T04:56:07.000+00:00",
        "id" : 123456789,
        "political_party" : {
          "website" : "aeiou",
          "siglum" : "aeiou",
          "tse_number" : "",
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "logo" : "aeiou",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "founded_date" : "2000-01-23T04:56:07.000+00:00"
        }
      } ],
      "resource_uri" : "aeiou",
      "about" : "aeiou",
      "alternative_names" : [ {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789
      } ],
      "picture" : "aeiou",
      "place_of_birth" : "aeiou",
      "marital_status" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789,
        "slug" : "aeiou"
      },
      "nationality" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789,
        "slug" : "aeiou"
      },
      "cpf" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789,
      "state" : "",
      "candidacies" : [ {
        "elected" : true,
        "institution" : "",
        "political_office" : "",
        "city" : "",
        "election_round" : "",
        "resource_uri" : "aeiou",
        "candidacy_status" : "",
        "id" : 123456789,
        "state" : ""
      } ],
      "email" : "aeiou",
      "events" : [ {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "resource_uri" : "aeiou",
        "description" : "aeiou",
        "id" : 123456789,
        "politician_event_type" : {
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "id" : 123456789,
          "slug" : "aeiou"
        }
      } ]
    },
    "candidacy_status" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789
    },
    "id" : 123456789,
    "state" : ""
  } ]
}}]
     
     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter electedGt: (query) Boolean data. Ex: True (optional)
     - parameter electedYear: (query) Boolean data. Ex: True (optional)
     - parameter electedMonth: (query) Boolean data. Ex: True (optional)
     - parameter electedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter electedSecond: (query) Boolean data. Ex: True (optional)
     - parameter electedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter electedIn: (query) Boolean data. Ex: True (optional)
     - parameter electedRegex: (query) Boolean data. Ex: True (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func candidaciesGetWithRequestBuilder(limit: Int32? = nil, offset: Int32? = nil, electedGt: Bool? = nil, electedYear: Bool? = nil, electedMonth: Bool? = nil, electedIsnull: Bool? = nil, electedSecond: Bool? = nil, electedWeekDay: Bool? = nil, electedIn: Bool? = nil, electedRegex: Bool? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/candidacies"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "elected__gt": electedGt,
            "elected__year": electedYear,
            "elected__month": electedMonth,
            "elected__isnull": electedIsnull,
            "elected__second": electedSecond,
            "elected__week_day": electedWeekDay,
            "elected__in": electedIn,
            "elected__regex": electedRegex
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func candidaciesIdGet(id: Int32, completion: @escaping ((_ data: Candidacy?,_ error: Error?) -> Void)) {
        candidaciesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /candidacies/{id}
     - examples: [{contentType=application/json, example={
  "elected" : true,
  "institution" : {
    "website" : "aeiou",
    "siglum" : "aeiou",
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "wikipedia" : "aeiou",
    "political_offices" : [ {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "term" : "",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    } ]
  },
  "political_office" : {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "description" : "aeiou",
    "term" : "",
    "id" : 123456789,
    "wikipedia" : "aeiou",
    "slug" : "aeiou"
  },
  "city" : {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "state" : {
      "country" : {
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      },
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    }
  },
  "election_round" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "round_number" : "",
    "election" : "aeiou",
    "resource_uri" : "aeiou",
    "id" : 123456789
  },
  "resource_uri" : "aeiou",
  "candidacy_status" : {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "id" : 123456789
  },
  "id" : 123456789,
  "state" : ""
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<Candidacy> 
     */
    open class func candidaciesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Candidacy> {
        var path = "/candidacies/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Candidacy>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter nameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter name: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func candidaciesStatusGet(limit: Int32? = nil, offset: Int32? = nil, nameGt: String? = nil, nameYear: String? = nil, nameMonth: String? = nil, nameIsnull: String? = nil, nameSecond: String? = nil, nameWeekDay: String? = nil, nameIn: String? = nil, nameRegex: String? = nil, nameGte: String? = nil, nameContains: String? = nil, nameLt: String? = nil, nameStartswith: String? = nil, nameIendswith: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, name: String? = nil, nameDay: String? = nil, nameMinute: String? = nil, nameSearch: String? = nil, nameHour: String? = nil, nameIregex: String? = nil, nameEndswith: String? = nil, nameRange: String? = nil, nameIstartswith: String? = nil, nameLte: String? = nil, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        candidaciesStatusGetWithRequestBuilder(limit: limit, offset: offset, nameGt: nameGt, nameYear: nameYear, nameMonth: nameMonth, nameIsnull: nameIsnull, nameSecond: nameSecond, nameWeekDay: nameWeekDay, nameIn: nameIn, nameRegex: nameRegex, nameGte: nameGte, nameContains: nameContains, nameLt: nameLt, nameStartswith: nameStartswith, nameIendswith: nameIendswith, nameIcontains: nameIcontains, nameIexact: nameIexact, name: name, nameDay: nameDay, nameMinute: nameMinute, nameSearch: nameSearch, nameHour: nameHour, nameIregex: nameIregex, nameEndswith: nameEndswith, nameRange: nameRange, nameIstartswith: nameIstartswith, nameLte: nameLte).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /candidacies-status
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "id" : 123456789
  } ]
}}]
     
     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter nameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter name: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func candidaciesStatusGetWithRequestBuilder(limit: Int32? = nil, offset: Int32? = nil, nameGt: String? = nil, nameYear: String? = nil, nameMonth: String? = nil, nameIsnull: String? = nil, nameSecond: String? = nil, nameWeekDay: String? = nil, nameIn: String? = nil, nameRegex: String? = nil, nameGte: String? = nil, nameContains: String? = nil, nameLt: String? = nil, nameStartswith: String? = nil, nameIendswith: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, name: String? = nil, nameDay: String? = nil, nameMinute: String? = nil, nameSearch: String? = nil, nameHour: String? = nil, nameIregex: String? = nil, nameEndswith: String? = nil, nameRange: String? = nil, nameIstartswith: String? = nil, nameLte: String? = nil) -> RequestBuilder<InlineResponse2001> {
        let path = "/candidacies-status"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "name__gt": nameGt,
            "name__year": nameYear,
            "name__month": nameMonth,
            "name__isnull": nameIsnull,
            "name__second": nameSecond,
            "name__week_day": nameWeekDay,
            "name__in": nameIn,
            "name__regex": nameRegex,
            "name__gte": nameGte,
            "name__contains": nameContains,
            "name__lt": nameLt,
            "name__startswith": nameStartswith,
            "name__iendswith": nameIendswith,
            "name__icontains": nameIcontains,
            "name__iexact": nameIexact,
            "name": name,
            "name__day": nameDay,
            "name__minute": nameMinute,
            "name__search": nameSearch,
            "name__hour": nameHour,
            "name__iregex": nameIregex,
            "name__endswith": nameEndswith,
            "name__range": nameRange,
            "name__istartswith": nameIstartswith,
            "name__lte": nameLte
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func candidaciesStatusIdGet(id: Int32, completion: @escaping ((_ data: CandidacyStatus?,_ error: Error?) -> Void)) {
        candidaciesStatusIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /candidacies-status/{id}
     - examples: [{contentType=application/json, example={
  "resource_uri" : "aeiou",
  "name" : "aeiou",
  "id" : 123456789
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<CandidacyStatus> 
     */
    open class func candidaciesStatusIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<CandidacyStatus> {
        var path = "/candidacies-status/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CandidacyStatus>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter stateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter state: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter nameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter name: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func citiesGet(limit: Int32? = nil, offset: Int32? = nil, stateSiglumGt: String? = nil, stateSiglumYear: String? = nil, stateSiglumMonth: String? = nil, stateSiglumIsnull: String? = nil, stateSiglumSecond: String? = nil, stateSiglumWeekDay: String? = nil, stateSiglumIn: String? = nil, stateSiglumRegex: String? = nil, stateSiglumGte: String? = nil, stateSiglumContains: String? = nil, stateSiglumLt: String? = nil, stateSiglumStartswith: String? = nil, stateSiglumIendswith: String? = nil, stateSiglumIcontains: String? = nil, stateSiglumIexact: String? = nil, stateSiglum: String? = nil, stateSiglumDay: String? = nil, stateSiglumMinute: String? = nil, stateSiglumSearch: String? = nil, stateSiglumHour: String? = nil, stateSiglumIregex: String? = nil, stateSiglumEndswith: String? = nil, stateSiglumRange: String? = nil, stateSiglumIstartswith: String? = nil, stateSiglumLte: String? = nil, stateNameGt: String? = nil, stateNameYear: String? = nil, stateNameMonth: String? = nil, stateNameIsnull: String? = nil, stateNameSecond: String? = nil, stateNameWeekDay: String? = nil, stateNameIn: String? = nil, stateNameRegex: String? = nil, stateNameGte: String? = nil, stateNameContains: String? = nil, stateNameLt: String? = nil, stateNameStartswith: String? = nil, stateNameIendswith: String? = nil, stateNameIcontains: String? = nil, stateNameIexact: String? = nil, stateName: String? = nil, stateNameDay: String? = nil, stateNameMinute: String? = nil, stateNameSearch: String? = nil, stateNameHour: String? = nil, stateNameIregex: String? = nil, stateNameEndswith: String? = nil, stateNameRange: String? = nil, stateNameIstartswith: String? = nil, stateNameLte: String? = nil, stateSlugGt: String? = nil, stateSlugYear: String? = nil, stateSlugMonth: String? = nil, stateSlugIsnull: String? = nil, stateSlugSecond: String? = nil, stateSlugWeekDay: String? = nil, stateSlugIn: String? = nil, stateSlugRegex: String? = nil, stateSlugGte: String? = nil, stateSlugContains: String? = nil, stateSlugLt: String? = nil, stateSlugStartswith: String? = nil, stateSlugIendswith: String? = nil, stateSlugIcontains: String? = nil, stateSlugIexact: String? = nil, stateSlug: String? = nil, stateSlugDay: String? = nil, stateSlugMinute: String? = nil, stateSlugSearch: String? = nil, stateSlugHour: String? = nil, stateSlugIregex: String? = nil, stateSlugEndswith: String? = nil, stateSlugRange: String? = nil, stateSlugIstartswith: String? = nil, stateSlugLte: String? = nil, stateGt: Int32? = nil, stateIn: Int32? = nil, stateGte: Int32? = nil, stateLt: Int32? = nil, stateLte: Int32? = nil, state: Int32? = nil, nameGt: String? = nil, nameYear: String? = nil, nameMonth: String? = nil, nameIsnull: String? = nil, nameSecond: String? = nil, nameWeekDay: String? = nil, nameIn: String? = nil, nameRegex: String? = nil, nameGte: String? = nil, nameContains: String? = nil, nameLt: String? = nil, nameStartswith: String? = nil, nameIendswith: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, name: String? = nil, nameDay: String? = nil, nameMinute: String? = nil, nameSearch: String? = nil, nameHour: String? = nil, nameIregex: String? = nil, nameEndswith: String? = nil, nameRange: String? = nil, nameIstartswith: String? = nil, nameLte: String? = nil, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        citiesGetWithRequestBuilder(limit: limit, offset: offset, stateSiglumGt: stateSiglumGt, stateSiglumYear: stateSiglumYear, stateSiglumMonth: stateSiglumMonth, stateSiglumIsnull: stateSiglumIsnull, stateSiglumSecond: stateSiglumSecond, stateSiglumWeekDay: stateSiglumWeekDay, stateSiglumIn: stateSiglumIn, stateSiglumRegex: stateSiglumRegex, stateSiglumGte: stateSiglumGte, stateSiglumContains: stateSiglumContains, stateSiglumLt: stateSiglumLt, stateSiglumStartswith: stateSiglumStartswith, stateSiglumIendswith: stateSiglumIendswith, stateSiglumIcontains: stateSiglumIcontains, stateSiglumIexact: stateSiglumIexact, stateSiglum: stateSiglum, stateSiglumDay: stateSiglumDay, stateSiglumMinute: stateSiglumMinute, stateSiglumSearch: stateSiglumSearch, stateSiglumHour: stateSiglumHour, stateSiglumIregex: stateSiglumIregex, stateSiglumEndswith: stateSiglumEndswith, stateSiglumRange: stateSiglumRange, stateSiglumIstartswith: stateSiglumIstartswith, stateSiglumLte: stateSiglumLte, stateNameGt: stateNameGt, stateNameYear: stateNameYear, stateNameMonth: stateNameMonth, stateNameIsnull: stateNameIsnull, stateNameSecond: stateNameSecond, stateNameWeekDay: stateNameWeekDay, stateNameIn: stateNameIn, stateNameRegex: stateNameRegex, stateNameGte: stateNameGte, stateNameContains: stateNameContains, stateNameLt: stateNameLt, stateNameStartswith: stateNameStartswith, stateNameIendswith: stateNameIendswith, stateNameIcontains: stateNameIcontains, stateNameIexact: stateNameIexact, stateName: stateName, stateNameDay: stateNameDay, stateNameMinute: stateNameMinute, stateNameSearch: stateNameSearch, stateNameHour: stateNameHour, stateNameIregex: stateNameIregex, stateNameEndswith: stateNameEndswith, stateNameRange: stateNameRange, stateNameIstartswith: stateNameIstartswith, stateNameLte: stateNameLte, stateSlugGt: stateSlugGt, stateSlugYear: stateSlugYear, stateSlugMonth: stateSlugMonth, stateSlugIsnull: stateSlugIsnull, stateSlugSecond: stateSlugSecond, stateSlugWeekDay: stateSlugWeekDay, stateSlugIn: stateSlugIn, stateSlugRegex: stateSlugRegex, stateSlugGte: stateSlugGte, stateSlugContains: stateSlugContains, stateSlugLt: stateSlugLt, stateSlugStartswith: stateSlugStartswith, stateSlugIendswith: stateSlugIendswith, stateSlugIcontains: stateSlugIcontains, stateSlugIexact: stateSlugIexact, stateSlug: stateSlug, stateSlugDay: stateSlugDay, stateSlugMinute: stateSlugMinute, stateSlugSearch: stateSlugSearch, stateSlugHour: stateSlugHour, stateSlugIregex: stateSlugIregex, stateSlugEndswith: stateSlugEndswith, stateSlugRange: stateSlugRange, stateSlugIstartswith: stateSlugIstartswith, stateSlugLte: stateSlugLte, stateGt: stateGt, stateIn: stateIn, stateGte: stateGte, stateLt: stateLt, stateLte: stateLte, state: state, nameGt: nameGt, nameYear: nameYear, nameMonth: nameMonth, nameIsnull: nameIsnull, nameSecond: nameSecond, nameWeekDay: nameWeekDay, nameIn: nameIn, nameRegex: nameRegex, nameGte: nameGte, nameContains: nameContains, nameLt: nameLt, nameStartswith: nameStartswith, nameIendswith: nameIendswith, nameIcontains: nameIcontains, nameIexact: nameIexact, name: name, nameDay: nameDay, nameMinute: nameMinute, nameSearch: nameSearch, nameHour: nameHour, nameIregex: nameIregex, nameEndswith: nameEndswith, nameRange: nameRange, nameIstartswith: nameIstartswith, nameLte: nameLte).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /cities
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "state" : {
      "country" : {
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      },
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    }
  } ]
}}]
     
     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter stateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter stateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter stateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter state: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter nameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter name: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter nameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func citiesGetWithRequestBuilder(limit: Int32? = nil, offset: Int32? = nil, stateSiglumGt: String? = nil, stateSiglumYear: String? = nil, stateSiglumMonth: String? = nil, stateSiglumIsnull: String? = nil, stateSiglumSecond: String? = nil, stateSiglumWeekDay: String? = nil, stateSiglumIn: String? = nil, stateSiglumRegex: String? = nil, stateSiglumGte: String? = nil, stateSiglumContains: String? = nil, stateSiglumLt: String? = nil, stateSiglumStartswith: String? = nil, stateSiglumIendswith: String? = nil, stateSiglumIcontains: String? = nil, stateSiglumIexact: String? = nil, stateSiglum: String? = nil, stateSiglumDay: String? = nil, stateSiglumMinute: String? = nil, stateSiglumSearch: String? = nil, stateSiglumHour: String? = nil, stateSiglumIregex: String? = nil, stateSiglumEndswith: String? = nil, stateSiglumRange: String? = nil, stateSiglumIstartswith: String? = nil, stateSiglumLte: String? = nil, stateNameGt: String? = nil, stateNameYear: String? = nil, stateNameMonth: String? = nil, stateNameIsnull: String? = nil, stateNameSecond: String? = nil, stateNameWeekDay: String? = nil, stateNameIn: String? = nil, stateNameRegex: String? = nil, stateNameGte: String? = nil, stateNameContains: String? = nil, stateNameLt: String? = nil, stateNameStartswith: String? = nil, stateNameIendswith: String? = nil, stateNameIcontains: String? = nil, stateNameIexact: String? = nil, stateName: String? = nil, stateNameDay: String? = nil, stateNameMinute: String? = nil, stateNameSearch: String? = nil, stateNameHour: String? = nil, stateNameIregex: String? = nil, stateNameEndswith: String? = nil, stateNameRange: String? = nil, stateNameIstartswith: String? = nil, stateNameLte: String? = nil, stateSlugGt: String? = nil, stateSlugYear: String? = nil, stateSlugMonth: String? = nil, stateSlugIsnull: String? = nil, stateSlugSecond: String? = nil, stateSlugWeekDay: String? = nil, stateSlugIn: String? = nil, stateSlugRegex: String? = nil, stateSlugGte: String? = nil, stateSlugContains: String? = nil, stateSlugLt: String? = nil, stateSlugStartswith: String? = nil, stateSlugIendswith: String? = nil, stateSlugIcontains: String? = nil, stateSlugIexact: String? = nil, stateSlug: String? = nil, stateSlugDay: String? = nil, stateSlugMinute: String? = nil, stateSlugSearch: String? = nil, stateSlugHour: String? = nil, stateSlugIregex: String? = nil, stateSlugEndswith: String? = nil, stateSlugRange: String? = nil, stateSlugIstartswith: String? = nil, stateSlugLte: String? = nil, stateGt: Int32? = nil, stateIn: Int32? = nil, stateGte: Int32? = nil, stateLt: Int32? = nil, stateLte: Int32? = nil, state: Int32? = nil, nameGt: String? = nil, nameYear: String? = nil, nameMonth: String? = nil, nameIsnull: String? = nil, nameSecond: String? = nil, nameWeekDay: String? = nil, nameIn: String? = nil, nameRegex: String? = nil, nameGte: String? = nil, nameContains: String? = nil, nameLt: String? = nil, nameStartswith: String? = nil, nameIendswith: String? = nil, nameIcontains: String? = nil, nameIexact: String? = nil, name: String? = nil, nameDay: String? = nil, nameMinute: String? = nil, nameSearch: String? = nil, nameHour: String? = nil, nameIregex: String? = nil, nameEndswith: String? = nil, nameRange: String? = nil, nameIstartswith: String? = nil, nameLte: String? = nil) -> RequestBuilder<InlineResponse2002> {
        let path = "/cities"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "state__siglum__gt": stateSiglumGt,
            "state__siglum__year": stateSiglumYear,
            "state__siglum__month": stateSiglumMonth,
            "state__siglum__isnull": stateSiglumIsnull,
            "state__siglum__second": stateSiglumSecond,
            "state__siglum__week_day": stateSiglumWeekDay,
            "state__siglum__in": stateSiglumIn,
            "state__siglum__regex": stateSiglumRegex,
            "state__siglum__gte": stateSiglumGte,
            "state__siglum__contains": stateSiglumContains,
            "state__siglum__lt": stateSiglumLt,
            "state__siglum__startswith": stateSiglumStartswith,
            "state__siglum__iendswith": stateSiglumIendswith,
            "state__siglum__icontains": stateSiglumIcontains,
            "state__siglum__iexact": stateSiglumIexact,
            "state__siglum": stateSiglum,
            "state__siglum__day": stateSiglumDay,
            "state__siglum__minute": stateSiglumMinute,
            "state__siglum__search": stateSiglumSearch,
            "state__siglum__hour": stateSiglumHour,
            "state__siglum__iregex": stateSiglumIregex,
            "state__siglum__endswith": stateSiglumEndswith,
            "state__siglum__range": stateSiglumRange,
            "state__siglum__istartswith": stateSiglumIstartswith,
            "state__siglum__lte": stateSiglumLte,
            "state__name__gt": stateNameGt,
            "state__name__year": stateNameYear,
            "state__name__month": stateNameMonth,
            "state__name__isnull": stateNameIsnull,
            "state__name__second": stateNameSecond,
            "state__name__week_day": stateNameWeekDay,
            "state__name__in": stateNameIn,
            "state__name__regex": stateNameRegex,
            "state__name__gte": stateNameGte,
            "state__name__contains": stateNameContains,
            "state__name__lt": stateNameLt,
            "state__name__startswith": stateNameStartswith,
            "state__name__iendswith": stateNameIendswith,
            "state__name__icontains": stateNameIcontains,
            "state__name__iexact": stateNameIexact,
            "state__name": stateName,
            "state__name__day": stateNameDay,
            "state__name__minute": stateNameMinute,
            "state__name__search": stateNameSearch,
            "state__name__hour": stateNameHour,
            "state__name__iregex": stateNameIregex,
            "state__name__endswith": stateNameEndswith,
            "state__name__range": stateNameRange,
            "state__name__istartswith": stateNameIstartswith,
            "state__name__lte": stateNameLte,
            "state__slug__gt": stateSlugGt,
            "state__slug__year": stateSlugYear,
            "state__slug__month": stateSlugMonth,
            "state__slug__isnull": stateSlugIsnull,
            "state__slug__second": stateSlugSecond,
            "state__slug__week_day": stateSlugWeekDay,
            "state__slug__in": stateSlugIn,
            "state__slug__regex": stateSlugRegex,
            "state__slug__gte": stateSlugGte,
            "state__slug__contains": stateSlugContains,
            "state__slug__lt": stateSlugLt,
            "state__slug__startswith": stateSlugStartswith,
            "state__slug__iendswith": stateSlugIendswith,
            "state__slug__icontains": stateSlugIcontains,
            "state__slug__iexact": stateSlugIexact,
            "state__slug": stateSlug,
            "state__slug__day": stateSlugDay,
            "state__slug__minute": stateSlugMinute,
            "state__slug__search": stateSlugSearch,
            "state__slug__hour": stateSlugHour,
            "state__slug__iregex": stateSlugIregex,
            "state__slug__endswith": stateSlugEndswith,
            "state__slug__range": stateSlugRange,
            "state__slug__istartswith": stateSlugIstartswith,
            "state__slug__lte": stateSlugLte,
            "state__gt": stateGt?.encodeToJSON(),
            "state__in": stateIn?.encodeToJSON(),
            "state__gte": stateGte?.encodeToJSON(),
            "state__lt": stateLt?.encodeToJSON(),
            "state__lte": stateLte?.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "name__gt": nameGt,
            "name__year": nameYear,
            "name__month": nameMonth,
            "name__isnull": nameIsnull,
            "name__second": nameSecond,
            "name__week_day": nameWeekDay,
            "name__in": nameIn,
            "name__regex": nameRegex,
            "name__gte": nameGte,
            "name__contains": nameContains,
            "name__lt": nameLt,
            "name__startswith": nameStartswith,
            "name__iendswith": nameIendswith,
            "name__icontains": nameIcontains,
            "name__iexact": nameIexact,
            "name": name,
            "name__day": nameDay,
            "name__minute": nameMinute,
            "name__search": nameSearch,
            "name__hour": nameHour,
            "name__iregex": nameIregex,
            "name__endswith": nameEndswith,
            "name__range": nameRange,
            "name__istartswith": nameIstartswith,
            "name__lte": nameLte
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func citiesIdGet(id: Int32, completion: @escaping ((_ data: City?,_ error: Error?) -> Void)) {
        citiesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /cities/{id}
     - 
     - examples: [{contentType=application/json, example={
  "resource_uri" : "aeiou",
  "name" : "aeiou",
  "logo" : "aeiou",
  "id" : 123456789,
  "state" : {
    "country" : {
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    },
    "siglum" : "aeiou",
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "wikipedia" : "aeiou",
    "slug" : "aeiou"
  }
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<City> 
     */
    open class func citiesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<City> {
        var path = "/cities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<City>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func citiesSearchGet(completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        citiesSearchGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /cities/search
     - 
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "state" : {
      "country" : {
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      },
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    }
  } ]
}}]

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func citiesSearchGetWithRequestBuilder() -> RequestBuilder<InlineResponse2002> {
        let path = "/cities/search"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func countriesGet(completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        countriesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /countries
     - 
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "siglum" : "aeiou",
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "logo" : "aeiou",
    "id" : 123456789,
    "wikipedia" : "aeiou",
    "slug" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func countriesGetWithRequestBuilder() -> RequestBuilder<InlineResponse2003> {
        let path = "/countries"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func countriesIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        countriesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /countries/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func countriesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/countries/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func educationsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        educationsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /educations/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func educationsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/educations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func electionsGet(completion: @escaping ((_ error: Error?) -> Void)) {
        electionsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /elections
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func electionsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/elections"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func electionsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        electionsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /elections/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func electionsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/elections/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ethnicitiesGet(completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        ethnicitiesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /ethnicities
     - 
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "resource_uri" : "aeiou",
    "name" : "aeiou",
    "id" : "",
    "slug" : "aeiou"
  } ]
}}]

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func ethnicitiesGetWithRequestBuilder() -> RequestBuilder<InlineResponse2004> {
        let path = "/ethnicities"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ethnicitiesIdGet(id: Int32, completion: @escaping ((_ data: Ethnicities?,_ error: Error?) -> Void)) {
        ethnicitiesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /ethnicities/{id}
     - 
     - examples: [{contentType=application/json, example={
  "resource_uri" : "aeiou",
  "name" : "aeiou",
  "id" : "",
  "slug" : "aeiou"
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<Ethnicities> 
     */
    open class func ethnicitiesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Ethnicities> {
        var path = "/ethnicities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Ethnicities>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func institutionsGet(completion: @escaping ((_ error: Error?) -> Void)) {
        institutionsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /institutions
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func institutionsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/institutions"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func institutionsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        institutionsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /institutions/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func institutionsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/institutions/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandateEventTypesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        mandateEventTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /mandate-event-types
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func mandateEventTypesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/mandate-event-types"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandateEventTypesIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        mandateEventTypesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /mandate-event-types/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func mandateEventTypesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/mandate-event-types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandateEventsGet(completion: @escaping ((_ error: Error?) -> Void)) {
        mandateEventsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /mandate-events
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func mandateEventsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/mandate-events"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandateEventsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        mandateEventsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /mandate-events/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func mandateEventsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/mandate-events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter candidacyElectedGt: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedYear: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedMonth: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedSecond: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIn: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedRegex: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedGte: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedContains: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedLt: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedStartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIendswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIcontains: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIexact: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElected: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedDay: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedMinute: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedSearch: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedHour: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIregex: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedEndswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedRange: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIstartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedLte: (query) Boolean data. Ex: True (optional)
     - parameter candidacyStateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyState: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyPoliticalOfficeNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandatesGet(limit: Int32? = nil, offset: Int32? = nil, candidacyElectedGt: Bool? = nil, candidacyElectedYear: Bool? = nil, candidacyElectedMonth: Bool? = nil, candidacyElectedIsnull: Bool? = nil, candidacyElectedSecond: Bool? = nil, candidacyElectedWeekDay: Bool? = nil, candidacyElectedIn: Bool? = nil, candidacyElectedRegex: Bool? = nil, candidacyElectedGte: Bool? = nil, candidacyElectedContains: Bool? = nil, candidacyElectedLt: Bool? = nil, candidacyElectedStartswith: Bool? = nil, candidacyElectedIendswith: Bool? = nil, candidacyElectedIcontains: Bool? = nil, candidacyElectedIexact: Bool? = nil, candidacyElected: Bool? = nil, candidacyElectedDay: Bool? = nil, candidacyElectedMinute: Bool? = nil, candidacyElectedSearch: Bool? = nil, candidacyElectedHour: Bool? = nil, candidacyElectedIregex: Bool? = nil, candidacyElectedEndswith: Bool? = nil, candidacyElectedRange: Bool? = nil, candidacyElectedIstartswith: Bool? = nil, candidacyElectedLte: Bool? = nil, candidacyStateSiglumGt: String? = nil, candidacyStateSiglumYear: String? = nil, candidacyStateSiglumMonth: String? = nil, candidacyStateSiglumIsnull: String? = nil, candidacyStateSiglumSecond: String? = nil, candidacyStateSiglumWeekDay: String? = nil, candidacyStateSiglumIn: String? = nil, candidacyStateSiglumRegex: String? = nil, candidacyStateSiglumGte: String? = nil, candidacyStateSiglumContains: String? = nil, candidacyStateSiglumLt: String? = nil, candidacyStateSiglumStartswith: String? = nil, candidacyStateSiglumIendswith: String? = nil, candidacyStateSiglumIcontains: String? = nil, candidacyStateSiglumIexact: String? = nil, candidacyStateSiglum: String? = nil, candidacyStateSiglumDay: String? = nil, candidacyStateSiglumMinute: String? = nil, candidacyStateSiglumSearch: String? = nil, candidacyStateSiglumHour: String? = nil, candidacyStateSiglumIregex: String? = nil, candidacyStateSiglumEndswith: String? = nil, candidacyStateSiglumRange: String? = nil, candidacyStateSiglumIstartswith: String? = nil, candidacyStateSiglumLte: String? = nil, candidacyStateNameGt: String? = nil, candidacyStateNameYear: String? = nil, candidacyStateNameMonth: String? = nil, candidacyStateNameIsnull: String? = nil, candidacyStateNameSecond: String? = nil, candidacyStateNameWeekDay: String? = nil, candidacyStateNameIn: String? = nil, candidacyStateNameRegex: String? = nil, candidacyStateNameGte: String? = nil, candidacyStateNameContains: String? = nil, candidacyStateNameLt: String? = nil, candidacyStateNameStartswith: String? = nil, candidacyStateNameIendswith: String? = nil, candidacyStateNameIcontains: String? = nil, candidacyStateNameIexact: String? = nil, candidacyStateName: String? = nil, candidacyStateNameDay: String? = nil, candidacyStateNameMinute: String? = nil, candidacyStateNameSearch: String? = nil, candidacyStateNameHour: String? = nil, candidacyStateNameIregex: String? = nil, candidacyStateNameEndswith: String? = nil, candidacyStateNameRange: String? = nil, candidacyStateNameIstartswith: String? = nil, candidacyStateNameLte: String? = nil, candidacyStateSlugGt: String? = nil, candidacyStateSlugYear: String? = nil, candidacyStateSlugMonth: String? = nil, candidacyStateSlugIsnull: String? = nil, candidacyStateSlugSecond: String? = nil, candidacyStateSlugWeekDay: String? = nil, candidacyStateSlugIn: String? = nil, candidacyStateSlugRegex: String? = nil, candidacyStateSlugGte: String? = nil, candidacyStateSlugContains: String? = nil, candidacyStateSlugLt: String? = nil, candidacyStateSlugStartswith: String? = nil, candidacyStateSlugIendswith: String? = nil, candidacyStateSlugIcontains: String? = nil, candidacyStateSlugIexact: String? = nil, candidacyStateSlug: String? = nil, candidacyStateSlugDay: String? = nil, candidacyStateSlugMinute: String? = nil, candidacyStateSlugSearch: String? = nil, candidacyStateSlugHour: String? = nil, candidacyStateSlugIregex: String? = nil, candidacyStateSlugEndswith: String? = nil, candidacyStateSlugRange: String? = nil, candidacyStateSlugIstartswith: String? = nil, candidacyStateSlugLte: String? = nil, candidacyStateGt: Int32? = nil, candidacyStateIn: Int32? = nil, candidacyStateGte: Int32? = nil, candidacyStateLt: Int32? = nil, candidacyStateLte: Int32? = nil, candidacyState: Int32? = nil, candidacyPoliticalOfficeNameGt: String? = nil, candidacyPoliticalOfficeNameYear: String? = nil, candidacyPoliticalOfficeNameMonth: String? = nil, candidacyPoliticalOfficeNameIsnull: String? = nil, candidacyPoliticalOfficeNameSecond: String? = nil, candidacyPoliticalOfficeNameWeekDay: String? = nil, candidacyPoliticalOfficeNameIn: String? = nil, candidacyPoliticalOfficeNameRegex: String? = nil, candidacyPoliticalOfficeNameGte: String? = nil, candidacyPoliticalOfficeNameContains: String? = nil, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        mandatesGetWithRequestBuilder(limit: limit, offset: offset, candidacyElectedGt: candidacyElectedGt, candidacyElectedYear: candidacyElectedYear, candidacyElectedMonth: candidacyElectedMonth, candidacyElectedIsnull: candidacyElectedIsnull, candidacyElectedSecond: candidacyElectedSecond, candidacyElectedWeekDay: candidacyElectedWeekDay, candidacyElectedIn: candidacyElectedIn, candidacyElectedRegex: candidacyElectedRegex, candidacyElectedGte: candidacyElectedGte, candidacyElectedContains: candidacyElectedContains, candidacyElectedLt: candidacyElectedLt, candidacyElectedStartswith: candidacyElectedStartswith, candidacyElectedIendswith: candidacyElectedIendswith, candidacyElectedIcontains: candidacyElectedIcontains, candidacyElectedIexact: candidacyElectedIexact, candidacyElected: candidacyElected, candidacyElectedDay: candidacyElectedDay, candidacyElectedMinute: candidacyElectedMinute, candidacyElectedSearch: candidacyElectedSearch, candidacyElectedHour: candidacyElectedHour, candidacyElectedIregex: candidacyElectedIregex, candidacyElectedEndswith: candidacyElectedEndswith, candidacyElectedRange: candidacyElectedRange, candidacyElectedIstartswith: candidacyElectedIstartswith, candidacyElectedLte: candidacyElectedLte, candidacyStateSiglumGt: candidacyStateSiglumGt, candidacyStateSiglumYear: candidacyStateSiglumYear, candidacyStateSiglumMonth: candidacyStateSiglumMonth, candidacyStateSiglumIsnull: candidacyStateSiglumIsnull, candidacyStateSiglumSecond: candidacyStateSiglumSecond, candidacyStateSiglumWeekDay: candidacyStateSiglumWeekDay, candidacyStateSiglumIn: candidacyStateSiglumIn, candidacyStateSiglumRegex: candidacyStateSiglumRegex, candidacyStateSiglumGte: candidacyStateSiglumGte, candidacyStateSiglumContains: candidacyStateSiglumContains, candidacyStateSiglumLt: candidacyStateSiglumLt, candidacyStateSiglumStartswith: candidacyStateSiglumStartswith, candidacyStateSiglumIendswith: candidacyStateSiglumIendswith, candidacyStateSiglumIcontains: candidacyStateSiglumIcontains, candidacyStateSiglumIexact: candidacyStateSiglumIexact, candidacyStateSiglum: candidacyStateSiglum, candidacyStateSiglumDay: candidacyStateSiglumDay, candidacyStateSiglumMinute: candidacyStateSiglumMinute, candidacyStateSiglumSearch: candidacyStateSiglumSearch, candidacyStateSiglumHour: candidacyStateSiglumHour, candidacyStateSiglumIregex: candidacyStateSiglumIregex, candidacyStateSiglumEndswith: candidacyStateSiglumEndswith, candidacyStateSiglumRange: candidacyStateSiglumRange, candidacyStateSiglumIstartswith: candidacyStateSiglumIstartswith, candidacyStateSiglumLte: candidacyStateSiglumLte, candidacyStateNameGt: candidacyStateNameGt, candidacyStateNameYear: candidacyStateNameYear, candidacyStateNameMonth: candidacyStateNameMonth, candidacyStateNameIsnull: candidacyStateNameIsnull, candidacyStateNameSecond: candidacyStateNameSecond, candidacyStateNameWeekDay: candidacyStateNameWeekDay, candidacyStateNameIn: candidacyStateNameIn, candidacyStateNameRegex: candidacyStateNameRegex, candidacyStateNameGte: candidacyStateNameGte, candidacyStateNameContains: candidacyStateNameContains, candidacyStateNameLt: candidacyStateNameLt, candidacyStateNameStartswith: candidacyStateNameStartswith, candidacyStateNameIendswith: candidacyStateNameIendswith, candidacyStateNameIcontains: candidacyStateNameIcontains, candidacyStateNameIexact: candidacyStateNameIexact, candidacyStateName: candidacyStateName, candidacyStateNameDay: candidacyStateNameDay, candidacyStateNameMinute: candidacyStateNameMinute, candidacyStateNameSearch: candidacyStateNameSearch, candidacyStateNameHour: candidacyStateNameHour, candidacyStateNameIregex: candidacyStateNameIregex, candidacyStateNameEndswith: candidacyStateNameEndswith, candidacyStateNameRange: candidacyStateNameRange, candidacyStateNameIstartswith: candidacyStateNameIstartswith, candidacyStateNameLte: candidacyStateNameLte, candidacyStateSlugGt: candidacyStateSlugGt, candidacyStateSlugYear: candidacyStateSlugYear, candidacyStateSlugMonth: candidacyStateSlugMonth, candidacyStateSlugIsnull: candidacyStateSlugIsnull, candidacyStateSlugSecond: candidacyStateSlugSecond, candidacyStateSlugWeekDay: candidacyStateSlugWeekDay, candidacyStateSlugIn: candidacyStateSlugIn, candidacyStateSlugRegex: candidacyStateSlugRegex, candidacyStateSlugGte: candidacyStateSlugGte, candidacyStateSlugContains: candidacyStateSlugContains, candidacyStateSlugLt: candidacyStateSlugLt, candidacyStateSlugStartswith: candidacyStateSlugStartswith, candidacyStateSlugIendswith: candidacyStateSlugIendswith, candidacyStateSlugIcontains: candidacyStateSlugIcontains, candidacyStateSlugIexact: candidacyStateSlugIexact, candidacyStateSlug: candidacyStateSlug, candidacyStateSlugDay: candidacyStateSlugDay, candidacyStateSlugMinute: candidacyStateSlugMinute, candidacyStateSlugSearch: candidacyStateSlugSearch, candidacyStateSlugHour: candidacyStateSlugHour, candidacyStateSlugIregex: candidacyStateSlugIregex, candidacyStateSlugEndswith: candidacyStateSlugEndswith, candidacyStateSlugRange: candidacyStateSlugRange, candidacyStateSlugIstartswith: candidacyStateSlugIstartswith, candidacyStateSlugLte: candidacyStateSlugLte, candidacyStateGt: candidacyStateGt, candidacyStateIn: candidacyStateIn, candidacyStateGte: candidacyStateGte, candidacyStateLt: candidacyStateLt, candidacyStateLte: candidacyStateLte, candidacyState: candidacyState, candidacyPoliticalOfficeNameGt: candidacyPoliticalOfficeNameGt, candidacyPoliticalOfficeNameYear: candidacyPoliticalOfficeNameYear, candidacyPoliticalOfficeNameMonth: candidacyPoliticalOfficeNameMonth, candidacyPoliticalOfficeNameIsnull: candidacyPoliticalOfficeNameIsnull, candidacyPoliticalOfficeNameSecond: candidacyPoliticalOfficeNameSecond, candidacyPoliticalOfficeNameWeekDay: candidacyPoliticalOfficeNameWeekDay, candidacyPoliticalOfficeNameIn: candidacyPoliticalOfficeNameIn, candidacyPoliticalOfficeNameRegex: candidacyPoliticalOfficeNameRegex, candidacyPoliticalOfficeNameGte: candidacyPoliticalOfficeNameGte, candidacyPoliticalOfficeNameContains: candidacyPoliticalOfficeNameContains).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /mandates
     - 
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "date_start" : "2000-01-23T04:56:07.000+00:00",
    "resource_uri" : "aeiou",
    "date_end" : "2000-01-23T04:56:07.000+00:00",
    "id" : 123456789,
    "candidacies" : {
      "elected" : true,
      "institution" : {
        "website" : "aeiou",
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "political_offices" : [ {
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "term" : "",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        } ]
      },
      "political_office" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "term" : "",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      },
      "city" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "state" : {
          "country" : {
            "siglum" : "aeiou",
            "resource_uri" : "aeiou",
            "name" : "aeiou",
            "logo" : "aeiou",
            "id" : 123456789,
            "wikipedia" : "aeiou",
            "slug" : "aeiou"
          },
          "siglum" : "aeiou",
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "logo" : "aeiou",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        }
      },
      "election_round" : {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "round_number" : "",
        "election" : "aeiou",
        "resource_uri" : "aeiou",
        "id" : 123456789
      },
      "resource_uri" : "aeiou",
      "candidacy_status" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789
      },
      "id" : 123456789,
      "state" : ""
    },
    "events" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "resource_uri" : "aeiou",
      "description" : "aeiou",
      "id" : 123456789,
      "politician_event_type" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789,
        "slug" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter candidacyElectedGt: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedYear: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedMonth: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedSecond: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIn: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedRegex: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedGte: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedContains: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedLt: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedStartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIendswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIcontains: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIexact: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElected: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedDay: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedMinute: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedSearch: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedHour: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIregex: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedEndswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedRange: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedIstartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidacyElectedLte: (query) Boolean data. Ex: True (optional)
     - parameter candidacyStateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyStateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyStateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyState: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidacyPoliticalOfficeNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidacyPoliticalOfficeNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func mandatesGetWithRequestBuilder(limit: Int32? = nil, offset: Int32? = nil, candidacyElectedGt: Bool? = nil, candidacyElectedYear: Bool? = nil, candidacyElectedMonth: Bool? = nil, candidacyElectedIsnull: Bool? = nil, candidacyElectedSecond: Bool? = nil, candidacyElectedWeekDay: Bool? = nil, candidacyElectedIn: Bool? = nil, candidacyElectedRegex: Bool? = nil, candidacyElectedGte: Bool? = nil, candidacyElectedContains: Bool? = nil, candidacyElectedLt: Bool? = nil, candidacyElectedStartswith: Bool? = nil, candidacyElectedIendswith: Bool? = nil, candidacyElectedIcontains: Bool? = nil, candidacyElectedIexact: Bool? = nil, candidacyElected: Bool? = nil, candidacyElectedDay: Bool? = nil, candidacyElectedMinute: Bool? = nil, candidacyElectedSearch: Bool? = nil, candidacyElectedHour: Bool? = nil, candidacyElectedIregex: Bool? = nil, candidacyElectedEndswith: Bool? = nil, candidacyElectedRange: Bool? = nil, candidacyElectedIstartswith: Bool? = nil, candidacyElectedLte: Bool? = nil, candidacyStateSiglumGt: String? = nil, candidacyStateSiglumYear: String? = nil, candidacyStateSiglumMonth: String? = nil, candidacyStateSiglumIsnull: String? = nil, candidacyStateSiglumSecond: String? = nil, candidacyStateSiglumWeekDay: String? = nil, candidacyStateSiglumIn: String? = nil, candidacyStateSiglumRegex: String? = nil, candidacyStateSiglumGte: String? = nil, candidacyStateSiglumContains: String? = nil, candidacyStateSiglumLt: String? = nil, candidacyStateSiglumStartswith: String? = nil, candidacyStateSiglumIendswith: String? = nil, candidacyStateSiglumIcontains: String? = nil, candidacyStateSiglumIexact: String? = nil, candidacyStateSiglum: String? = nil, candidacyStateSiglumDay: String? = nil, candidacyStateSiglumMinute: String? = nil, candidacyStateSiglumSearch: String? = nil, candidacyStateSiglumHour: String? = nil, candidacyStateSiglumIregex: String? = nil, candidacyStateSiglumEndswith: String? = nil, candidacyStateSiglumRange: String? = nil, candidacyStateSiglumIstartswith: String? = nil, candidacyStateSiglumLte: String? = nil, candidacyStateNameGt: String? = nil, candidacyStateNameYear: String? = nil, candidacyStateNameMonth: String? = nil, candidacyStateNameIsnull: String? = nil, candidacyStateNameSecond: String? = nil, candidacyStateNameWeekDay: String? = nil, candidacyStateNameIn: String? = nil, candidacyStateNameRegex: String? = nil, candidacyStateNameGte: String? = nil, candidacyStateNameContains: String? = nil, candidacyStateNameLt: String? = nil, candidacyStateNameStartswith: String? = nil, candidacyStateNameIendswith: String? = nil, candidacyStateNameIcontains: String? = nil, candidacyStateNameIexact: String? = nil, candidacyStateName: String? = nil, candidacyStateNameDay: String? = nil, candidacyStateNameMinute: String? = nil, candidacyStateNameSearch: String? = nil, candidacyStateNameHour: String? = nil, candidacyStateNameIregex: String? = nil, candidacyStateNameEndswith: String? = nil, candidacyStateNameRange: String? = nil, candidacyStateNameIstartswith: String? = nil, candidacyStateNameLte: String? = nil, candidacyStateSlugGt: String? = nil, candidacyStateSlugYear: String? = nil, candidacyStateSlugMonth: String? = nil, candidacyStateSlugIsnull: String? = nil, candidacyStateSlugSecond: String? = nil, candidacyStateSlugWeekDay: String? = nil, candidacyStateSlugIn: String? = nil, candidacyStateSlugRegex: String? = nil, candidacyStateSlugGte: String? = nil, candidacyStateSlugContains: String? = nil, candidacyStateSlugLt: String? = nil, candidacyStateSlugStartswith: String? = nil, candidacyStateSlugIendswith: String? = nil, candidacyStateSlugIcontains: String? = nil, candidacyStateSlugIexact: String? = nil, candidacyStateSlug: String? = nil, candidacyStateSlugDay: String? = nil, candidacyStateSlugMinute: String? = nil, candidacyStateSlugSearch: String? = nil, candidacyStateSlugHour: String? = nil, candidacyStateSlugIregex: String? = nil, candidacyStateSlugEndswith: String? = nil, candidacyStateSlugRange: String? = nil, candidacyStateSlugIstartswith: String? = nil, candidacyStateSlugLte: String? = nil, candidacyStateGt: Int32? = nil, candidacyStateIn: Int32? = nil, candidacyStateGte: Int32? = nil, candidacyStateLt: Int32? = nil, candidacyStateLte: Int32? = nil, candidacyState: Int32? = nil, candidacyPoliticalOfficeNameGt: String? = nil, candidacyPoliticalOfficeNameYear: String? = nil, candidacyPoliticalOfficeNameMonth: String? = nil, candidacyPoliticalOfficeNameIsnull: String? = nil, candidacyPoliticalOfficeNameSecond: String? = nil, candidacyPoliticalOfficeNameWeekDay: String? = nil, candidacyPoliticalOfficeNameIn: String? = nil, candidacyPoliticalOfficeNameRegex: String? = nil, candidacyPoliticalOfficeNameGte: String? = nil, candidacyPoliticalOfficeNameContains: String? = nil) -> RequestBuilder<InlineResponse2005> {
        let path = "/mandates"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "candidacy__elected__gt": candidacyElectedGt,
            "candidacy__elected__year": candidacyElectedYear,
            "candidacy__elected__month": candidacyElectedMonth,
            "candidacy__elected__isnull": candidacyElectedIsnull,
            "candidacy__elected__second": candidacyElectedSecond,
            "candidacy__elected__week_day": candidacyElectedWeekDay,
            "candidacy__elected__in": candidacyElectedIn,
            "candidacy__elected__regex": candidacyElectedRegex,
            "candidacy__elected__gte": candidacyElectedGte,
            "candidacy__elected__contains": candidacyElectedContains,
            "candidacy__elected__lt": candidacyElectedLt,
            "candidacy__elected__startswith": candidacyElectedStartswith,
            "candidacy__elected__iendswith": candidacyElectedIendswith,
            "candidacy__elected__icontains": candidacyElectedIcontains,
            "candidacy__elected__iexact": candidacyElectedIexact,
            "candidacy__elected": candidacyElected,
            "candidacy__elected__day": candidacyElectedDay,
            "candidacy__elected__minute": candidacyElectedMinute,
            "candidacy__elected__search": candidacyElectedSearch,
            "candidacy__elected__hour": candidacyElectedHour,
            "candidacy__elected__iregex": candidacyElectedIregex,
            "candidacy__elected__endswith": candidacyElectedEndswith,
            "candidacy__elected__range": candidacyElectedRange,
            "candidacy__elected__istartswith": candidacyElectedIstartswith,
            "candidacy__elected__lte": candidacyElectedLte,
            "candidacy__state__siglum__gt": candidacyStateSiglumGt,
            "candidacy__state__siglum__year": candidacyStateSiglumYear,
            "candidacy__state__siglum__month": candidacyStateSiglumMonth,
            "candidacy__state__siglum__isnull": candidacyStateSiglumIsnull,
            "candidacy__state__siglum__second": candidacyStateSiglumSecond,
            "candidacy__state__siglum__week_day": candidacyStateSiglumWeekDay,
            "candidacy__state__siglum__in": candidacyStateSiglumIn,
            "candidacy__state__siglum__regex": candidacyStateSiglumRegex,
            "candidacy__state__siglum__gte": candidacyStateSiglumGte,
            "candidacy__state__siglum__contains": candidacyStateSiglumContains,
            "candidacy__state__siglum__lt": candidacyStateSiglumLt,
            "candidacy__state__siglum__startswith": candidacyStateSiglumStartswith,
            "candidacy__state__siglum__iendswith": candidacyStateSiglumIendswith,
            "candidacy__state__siglum__icontains": candidacyStateSiglumIcontains,
            "candidacy__state__siglum__iexact": candidacyStateSiglumIexact,
            "candidacy__state__siglum": candidacyStateSiglum,
            "candidacy__state__siglum__day": candidacyStateSiglumDay,
            "candidacy__state__siglum__minute": candidacyStateSiglumMinute,
            "candidacy__state__siglum__search": candidacyStateSiglumSearch,
            "candidacy__state__siglum__hour": candidacyStateSiglumHour,
            "candidacy__state__siglum__iregex": candidacyStateSiglumIregex,
            "candidacy__state__siglum__endswith": candidacyStateSiglumEndswith,
            "candidacy__state__siglum__range": candidacyStateSiglumRange,
            "candidacy__state__siglum__istartswith": candidacyStateSiglumIstartswith,
            "candidacy__state__siglum__lte": candidacyStateSiglumLte,
            "candidacy__state__name__gt": candidacyStateNameGt,
            "candidacy__state__name__year": candidacyStateNameYear,
            "candidacy__state__name__month": candidacyStateNameMonth,
            "candidacy__state__name__isnull": candidacyStateNameIsnull,
            "candidacy__state__name__second": candidacyStateNameSecond,
            "candidacy__state__name__week_day": candidacyStateNameWeekDay,
            "candidacy__state__name__in": candidacyStateNameIn,
            "candidacy__state__name__regex": candidacyStateNameRegex,
            "candidacy__state__name__gte": candidacyStateNameGte,
            "candidacy__state__name__contains": candidacyStateNameContains,
            "candidacy__state__name__lt": candidacyStateNameLt,
            "candidacy__state__name__startswith": candidacyStateNameStartswith,
            "candidacy__state__name__iendswith": candidacyStateNameIendswith,
            "candidacy__state__name__icontains": candidacyStateNameIcontains,
            "candidacy__state__name__iexact": candidacyStateNameIexact,
            "candidacy__state__name": candidacyStateName,
            "candidacy__state__name__day": candidacyStateNameDay,
            "candidacy__state__name__minute": candidacyStateNameMinute,
            "candidacy__state__name__search": candidacyStateNameSearch,
            "candidacy__state__name__hour": candidacyStateNameHour,
            "candidacy__state__name__iregex": candidacyStateNameIregex,
            "candidacy__state__name__endswith": candidacyStateNameEndswith,
            "candidacy__state__name__range": candidacyStateNameRange,
            "candidacy__state__name__istartswith": candidacyStateNameIstartswith,
            "candidacy__state__name__lte": candidacyStateNameLte,
            "candidacy__state__slug__gt": candidacyStateSlugGt,
            "candidacy__state__slug__year": candidacyStateSlugYear,
            "candidacy__state__slug__month": candidacyStateSlugMonth,
            "candidacy__state__slug__isnull": candidacyStateSlugIsnull,
            "candidacy__state__slug__second": candidacyStateSlugSecond,
            "candidacy__state__slug__week_day": candidacyStateSlugWeekDay,
            "candidacy__state__slug__in": candidacyStateSlugIn,
            "candidacy__state__slug__regex": candidacyStateSlugRegex,
            "candidacy__state__slug__gte": candidacyStateSlugGte,
            "candidacy__state__slug__contains": candidacyStateSlugContains,
            "candidacy__state__slug__lt": candidacyStateSlugLt,
            "candidacy__state__slug__startswith": candidacyStateSlugStartswith,
            "candidacy__state__slug__iendswith": candidacyStateSlugIendswith,
            "candidacy__state__slug__icontains": candidacyStateSlugIcontains,
            "candidacy__state__slug__iexact": candidacyStateSlugIexact,
            "candidacy__state__slug": candidacyStateSlug,
            "candidacy__state__slug__day": candidacyStateSlugDay,
            "candidacy__state__slug__minute": candidacyStateSlugMinute,
            "candidacy__state__slug__search": candidacyStateSlugSearch,
            "candidacy__state__slug__hour": candidacyStateSlugHour,
            "candidacy__state__slug__iregex": candidacyStateSlugIregex,
            "candidacy__state__slug__endswith": candidacyStateSlugEndswith,
            "candidacy__state__slug__range": candidacyStateSlugRange,
            "candidacy__state__slug__istartswith": candidacyStateSlugIstartswith,
            "candidacy__state__slug__lte": candidacyStateSlugLte,
            "candidacy__state__gt": candidacyStateGt?.encodeToJSON(),
            "candidacy__state__in": candidacyStateIn?.encodeToJSON(),
            "candidacy__state__gte": candidacyStateGte?.encodeToJSON(),
            "candidacy__state__lt": candidacyStateLt?.encodeToJSON(),
            "candidacy__state__lte": candidacyStateLte?.encodeToJSON(),
            "candidacy__state": candidacyState?.encodeToJSON(),
            "candidacy__political_office__name__gt": candidacyPoliticalOfficeNameGt,
            "candidacy__political_office__name__year": candidacyPoliticalOfficeNameYear,
            "candidacy__political_office__name__month": candidacyPoliticalOfficeNameMonth,
            "candidacy__political_office__name__isnull": candidacyPoliticalOfficeNameIsnull,
            "candidacy__political_office__name__second": candidacyPoliticalOfficeNameSecond,
            "candidacy__political_office__name__week_day": candidacyPoliticalOfficeNameWeekDay,
            "candidacy__political_office__name__in": candidacyPoliticalOfficeNameIn,
            "candidacy__political_office__name__regex": candidacyPoliticalOfficeNameRegex,
            "candidacy__political_office__name__gte": candidacyPoliticalOfficeNameGte,
            "candidacy__political_office__name__contains": candidacyPoliticalOfficeNameContains
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func mandatesIdGet(id: Int32, completion: @escaping ((_ data: Mandates?,_ error: Error?) -> Void)) {
        mandatesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /mandates/{id}
     - 
     - examples: [{contentType=application/json, example={
  "date_start" : "2000-01-23T04:56:07.000+00:00",
  "resource_uri" : "aeiou",
  "date_end" : "2000-01-23T04:56:07.000+00:00",
  "id" : 123456789,
  "candidacies" : {
    "elected" : true,
    "institution" : {
      "website" : "aeiou",
      "siglum" : "aeiou",
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "political_offices" : [ {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "term" : "",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      } ]
    },
    "political_office" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "description" : "aeiou",
      "term" : "",
      "id" : 123456789,
      "wikipedia" : "aeiou",
      "slug" : "aeiou"
    },
    "city" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "logo" : "aeiou",
      "id" : 123456789,
      "state" : {
        "country" : {
          "siglum" : "aeiou",
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "logo" : "aeiou",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        },
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      }
    },
    "election_round" : {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "round_number" : "",
      "election" : "aeiou",
      "resource_uri" : "aeiou",
      "id" : 123456789
    },
    "resource_uri" : "aeiou",
    "candidacy_status" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789
    },
    "id" : 123456789,
    "state" : ""
  },
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "resource_uri" : "aeiou",
    "description" : "aeiou",
    "id" : 123456789,
    "politician_event_type" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789,
      "slug" : "aeiou"
    }
  } ]
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<Mandates> 
     */
    open class func mandatesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Mandates> {
        var path = "/mandates/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Mandates>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maritalStatusGet(completion: @escaping ((_ error: Error?) -> Void)) {
        maritalStatusGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /marital-status
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func maritalStatusGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/marital-status"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func maritalStatusIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        maritalStatusIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /marital-status/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func maritalStatusIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/marital-status/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nationalitiesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        nationalitiesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /nationalities
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func nationalitiesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/nationalities"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nationalitiesIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        nationalitiesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /nationalities/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func nationalitiesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/nationalities/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func occupationsGet(completion: @escaping ((_ error: Error?) -> Void)) {
        occupationsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /occupations
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func occupationsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/occupations"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func occupationsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        occupationsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /occupations/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func occupationsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/occupations/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func occupationsSearchGet(completion: @escaping ((_ error: Error?) -> Void)) {
        occupationsSearchGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /occupations/search
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func occupationsSearchGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/occupations/search"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicalOfficesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        politicalOfficesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /political-offices
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func politicalOfficesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/political-offices"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicalPartiesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        politicalPartiesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /political-parties
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func politicalPartiesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/political-parties"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicalPartiesIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        politicalPartiesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /political-parties/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func politicalPartiesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/political-parties/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicianEventTypesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        politicianEventTypesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politician-event-types
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func politicianEventTypesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/politician-event-types"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicianEventTypesIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        politicianEventTypesIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politician-event-types/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func politicianEventTypesIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/politician-event-types/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicianEventsGet(completion: @escaping ((_ error: Error?) -> Void)) {
        politicianEventsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politician-events
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func politicianEventsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/politician-events"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politicianEventsIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        politicianEventsIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politician-events/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func politicianEventsIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/politician-events/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter candidaciesElectedGt: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedYear: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedMonth: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedSecond: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIn: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedRegex: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedGte: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedContains: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedLt: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedStartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIendswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIcontains: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIexact: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElected: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedDay: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedMinute: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedSearch: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedHour: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIregex: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedEndswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedRange: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIstartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedLte: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesStateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesState: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOffice: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationality: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducation: (query) A single related resource. Can be either a URI or set of nestedresource data. (optional)
     - parameter candidaciesPoliticianEthnicityNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politiciansGet(limit: Int32? = nil, offset: Int32? = nil, candidaciesElectedGt: Bool? = nil, candidaciesElectedYear: Bool? = nil, candidaciesElectedMonth: Bool? = nil, candidaciesElectedIsnull: Bool? = nil, candidaciesElectedSecond: Bool? = nil, candidaciesElectedWeekDay: Bool? = nil, candidaciesElectedIn: Bool? = nil, candidaciesElectedRegex: Bool? = nil, candidaciesElectedGte: Bool? = nil, candidaciesElectedContains: Bool? = nil, candidaciesElectedLt: Bool? = nil, candidaciesElectedStartswith: Bool? = nil, candidaciesElectedIendswith: Bool? = nil, candidaciesElectedIcontains: Bool? = nil, candidaciesElectedIexact: Bool? = nil, candidaciesElected: Bool? = nil, candidaciesElectedDay: Bool? = nil, candidaciesElectedMinute: Bool? = nil, candidaciesElectedSearch: Bool? = nil, candidaciesElectedHour: Bool? = nil, candidaciesElectedIregex: Bool? = nil, candidaciesElectedEndswith: Bool? = nil, candidaciesElectedRange: Bool? = nil, candidaciesElectedIstartswith: Bool? = nil, candidaciesElectedLte: Bool? = nil, candidaciesStateSiglumGt: String? = nil, candidaciesStateSiglumYear: String? = nil, candidaciesStateSiglumMonth: String? = nil, candidaciesStateSiglumIsnull: String? = nil, candidaciesStateSiglumSecond: String? = nil, candidaciesStateSiglumWeekDay: String? = nil, candidaciesStateSiglumIn: String? = nil, candidaciesStateSiglumRegex: String? = nil, candidaciesStateSiglumGte: String? = nil, candidaciesStateSiglumContains: String? = nil, candidaciesStateSiglumLt: String? = nil, candidaciesStateSiglumStartswith: String? = nil, candidaciesStateSiglumIendswith: String? = nil, candidaciesStateSiglumIcontains: String? = nil, candidaciesStateSiglumIexact: String? = nil, candidaciesStateSiglum: String? = nil, candidaciesStateSiglumDay: String? = nil, candidaciesStateSiglumMinute: String? = nil, candidaciesStateSiglumSearch: String? = nil, candidaciesStateSiglumHour: String? = nil, candidaciesStateSiglumIregex: String? = nil, candidaciesStateSiglumEndswith: String? = nil, candidaciesStateSiglumRange: String? = nil, candidaciesStateSiglumIstartswith: String? = nil, candidaciesStateSiglumLte: String? = nil, candidaciesStateNameGt: String? = nil, candidaciesStateNameYear: String? = nil, candidaciesStateNameMonth: String? = nil, candidaciesStateNameIsnull: String? = nil, candidaciesStateNameSecond: String? = nil, candidaciesStateNameWeekDay: String? = nil, candidaciesStateNameIn: String? = nil, candidaciesStateNameRegex: String? = nil, candidaciesStateNameGte: String? = nil, candidaciesStateNameContains: String? = nil, candidaciesStateNameLt: String? = nil, candidaciesStateNameStartswith: String? = nil, candidaciesStateNameIendswith: String? = nil, candidaciesStateNameIcontains: String? = nil, candidaciesStateNameIexact: String? = nil, candidaciesStateName: String? = nil, candidaciesStateNameDay: String? = nil, candidaciesStateNameMinute: String? = nil, candidaciesStateNameSearch: String? = nil, candidaciesStateNameHour: String? = nil, candidaciesStateNameIregex: String? = nil, candidaciesStateNameEndswith: String? = nil, candidaciesStateNameRange: String? = nil, candidaciesStateNameIstartswith: String? = nil, candidaciesStateNameLte: String? = nil, candidaciesStateSlugGt: String? = nil, candidaciesStateSlugYear: String? = nil, candidaciesStateSlugMonth: String? = nil, candidaciesStateSlugIsnull: String? = nil, candidaciesStateSlugSecond: String? = nil, candidaciesStateSlugWeekDay: String? = nil, candidaciesStateSlugIn: String? = nil, candidaciesStateSlugRegex: String? = nil, candidaciesStateSlugGte: String? = nil, candidaciesStateSlugContains: String? = nil, candidaciesStateSlugLt: String? = nil, candidaciesStateSlugStartswith: String? = nil, candidaciesStateSlugIendswith: String? = nil, candidaciesStateSlugIcontains: String? = nil, candidaciesStateSlugIexact: String? = nil, candidaciesStateSlug: String? = nil, candidaciesStateSlugDay: String? = nil, candidaciesStateSlugMinute: String? = nil, candidaciesStateSlugSearch: String? = nil, candidaciesStateSlugHour: String? = nil, candidaciesStateSlugIregex: String? = nil, candidaciesStateSlugEndswith: String? = nil, candidaciesStateSlugRange: String? = nil, candidaciesStateSlugIstartswith: String? = nil, candidaciesStateSlugLte: String? = nil, candidaciesStateGt: Int32? = nil, candidaciesStateIn: Int32? = nil, candidaciesStateGte: Int32? = nil, candidaciesStateLt: Int32? = nil, candidaciesStateLte: Int32? = nil, candidaciesState: Int32? = nil, candidaciesPoliticalOfficeNameGt: String? = nil, candidaciesPoliticalOfficeNameYear: String? = nil, candidaciesPoliticalOfficeNameMonth: String? = nil, candidaciesPoliticalOfficeNameIsnull: String? = nil, candidaciesPoliticalOfficeNameSecond: String? = nil, candidaciesPoliticalOfficeNameWeekDay: String? = nil, candidaciesPoliticalOfficeNameIn: String? = nil, candidaciesPoliticalOfficeNameRegex: String? = nil, candidaciesPoliticalOfficeNameGte: String? = nil, candidaciesPoliticalOfficeNameContains: String? = nil, candidaciesPoliticalOfficeNameLt: String? = nil, candidaciesPoliticalOfficeNameStartswith: String? = nil, candidaciesPoliticalOfficeNameIendswith: String? = nil, candidaciesPoliticalOfficeNameIcontains: String? = nil, candidaciesPoliticalOfficeNameIexact: String? = nil, candidaciesPoliticalOfficeName: String? = nil, candidaciesPoliticalOfficeNameDay: String? = nil, candidaciesPoliticalOfficeNameMinute: String? = nil, candidaciesPoliticalOfficeNameSearch: String? = nil, candidaciesPoliticalOfficeNameHour: String? = nil, candidaciesPoliticalOfficeNameIregex: String? = nil, candidaciesPoliticalOfficeNameEndswith: String? = nil, candidaciesPoliticalOfficeNameRange: String? = nil, candidaciesPoliticalOfficeNameIstartswith: String? = nil, candidaciesPoliticalOfficeNameLte: String? = nil, candidaciesPoliticalOfficeSlugGt: String? = nil, candidaciesPoliticalOfficeSlugYear: String? = nil, candidaciesPoliticalOfficeSlugMonth: String? = nil, candidaciesPoliticalOfficeSlugIsnull: String? = nil, candidaciesPoliticalOfficeSlugSecond: String? = nil, candidaciesPoliticalOfficeSlugWeekDay: String? = nil, candidaciesPoliticalOfficeSlugIn: String? = nil, candidaciesPoliticalOfficeSlugRegex: String? = nil, candidaciesPoliticalOfficeSlugGte: String? = nil, candidaciesPoliticalOfficeSlugContains: String? = nil, candidaciesPoliticalOfficeSlugLt: String? = nil, candidaciesPoliticalOfficeSlugStartswith: String? = nil, candidaciesPoliticalOfficeSlugIendswith: String? = nil, candidaciesPoliticalOfficeSlugIcontains: String? = nil, candidaciesPoliticalOfficeSlugIexact: String? = nil, candidaciesPoliticalOfficeSlug: String? = nil, candidaciesPoliticalOfficeSlugDay: String? = nil, candidaciesPoliticalOfficeSlugMinute: String? = nil, candidaciesPoliticalOfficeSlugSearch: String? = nil, candidaciesPoliticalOfficeSlugHour: String? = nil, candidaciesPoliticalOfficeSlugIregex: String? = nil, candidaciesPoliticalOfficeSlugEndswith: String? = nil, candidaciesPoliticalOfficeSlugRange: String? = nil, candidaciesPoliticalOfficeSlugIstartswith: String? = nil, candidaciesPoliticalOfficeSlugLte: String? = nil, candidaciesPoliticalOfficeGt: Int32? = nil, candidaciesPoliticalOfficeIn: Int32? = nil, candidaciesPoliticalOfficeGte: Int32? = nil, candidaciesPoliticalOfficeLt: Int32? = nil, candidaciesPoliticalOfficeLte: Int32? = nil, candidaciesPoliticalOffice: Int32? = nil, candidaciesPoliticianNationalityNameGt: String? = nil, candidaciesPoliticianNationalityNameYear: String? = nil, candidaciesPoliticianNationalityNameMonth: String? = nil, candidaciesPoliticianNationalityNameIsnull: String? = nil, candidaciesPoliticianNationalityNameSecond: String? = nil, candidaciesPoliticianNationalityNameWeekDay: String? = nil, candidaciesPoliticianNationalityNameIn: String? = nil, candidaciesPoliticianNationalityNameRegex: String? = nil, candidaciesPoliticianNationalityNameGte: String? = nil, candidaciesPoliticianNationalityNameContains: String? = nil, candidaciesPoliticianNationalityNameLt: String? = nil, candidaciesPoliticianNationalityNameStartswith: String? = nil, candidaciesPoliticianNationalityNameIendswith: String? = nil, candidaciesPoliticianNationalityNameIcontains: String? = nil, candidaciesPoliticianNationalityNameIexact: String? = nil, candidaciesPoliticianNationalityName: String? = nil, candidaciesPoliticianNationalityNameDay: String? = nil, candidaciesPoliticianNationalityNameMinute: String? = nil, candidaciesPoliticianNationalityNameSearch: String? = nil, candidaciesPoliticianNationalityNameHour: String? = nil, candidaciesPoliticianNationalityNameIregex: String? = nil, candidaciesPoliticianNationalityNameEndswith: String? = nil, candidaciesPoliticianNationalityNameRange: String? = nil, candidaciesPoliticianNationalityNameIstartswith: String? = nil, candidaciesPoliticianNationalityNameLte: String? = nil, candidaciesPoliticianNationalitySlugGt: String? = nil, candidaciesPoliticianNationalitySlugYear: String? = nil, candidaciesPoliticianNationalitySlugMonth: String? = nil, candidaciesPoliticianNationalitySlugIsnull: String? = nil, candidaciesPoliticianNationalitySlugSecond: String? = nil, candidaciesPoliticianNationalitySlugWeekDay: String? = nil, candidaciesPoliticianNationalitySlugIn: String? = nil, candidaciesPoliticianNationalitySlugRegex: String? = nil, candidaciesPoliticianNationalitySlugGte: String? = nil, candidaciesPoliticianNationalitySlugContains: String? = nil, candidaciesPoliticianNationalitySlugLt: String? = nil, candidaciesPoliticianNationalitySlugStartswith: String? = nil, candidaciesPoliticianNationalitySlugIendswith: String? = nil, candidaciesPoliticianNationalitySlugIcontains: String? = nil, candidaciesPoliticianNationalitySlugIexact: String? = nil, candidaciesPoliticianNationalitySlug: String? = nil, candidaciesPoliticianNationalitySlugDay: String? = nil, candidaciesPoliticianNationalitySlugMinute: String? = nil, candidaciesPoliticianNationalitySlugSearch: String? = nil, candidaciesPoliticianNationalitySlugHour: String? = nil, candidaciesPoliticianNationalitySlugIregex: String? = nil, candidaciesPoliticianNationalitySlugEndswith: String? = nil, candidaciesPoliticianNationalitySlugRange: String? = nil, candidaciesPoliticianNationalitySlugIstartswith: String? = nil, candidaciesPoliticianNationalitySlugLte: String? = nil, candidaciesPoliticianNationalityGt: Int32? = nil, candidaciesPoliticianNationalityIn: Int32? = nil, candidaciesPoliticianNationalityGte: Int32? = nil, candidaciesPoliticianNationalityLt: Int32? = nil, candidaciesPoliticianNationalityLte: Int32? = nil, candidaciesPoliticianNationality: Int32? = nil, candidaciesPoliticianEducationNameGt: String? = nil, candidaciesPoliticianEducationNameYear: String? = nil, candidaciesPoliticianEducationNameMonth: String? = nil, candidaciesPoliticianEducationNameIsnull: String? = nil, candidaciesPoliticianEducationNameSecond: String? = nil, candidaciesPoliticianEducationNameWeekDay: String? = nil, candidaciesPoliticianEducationNameIn: String? = nil, candidaciesPoliticianEducationNameRegex: String? = nil, candidaciesPoliticianEducationNameGte: String? = nil, candidaciesPoliticianEducationNameContains: String? = nil, candidaciesPoliticianEducationNameLt: String? = nil, candidaciesPoliticianEducationNameStartswith: String? = nil, candidaciesPoliticianEducationNameIendswith: String? = nil, candidaciesPoliticianEducationNameIcontains: String? = nil, candidaciesPoliticianEducationNameIexact: String? = nil, candidaciesPoliticianEducationName: String? = nil, candidaciesPoliticianEducationNameDay: String? = nil, candidaciesPoliticianEducationNameMinute: String? = nil, candidaciesPoliticianEducationNameSearch: String? = nil, candidaciesPoliticianEducationNameHour: String? = nil, candidaciesPoliticianEducationNameIregex: String? = nil, candidaciesPoliticianEducationNameEndswith: String? = nil, candidaciesPoliticianEducationNameRange: String? = nil, candidaciesPoliticianEducationNameIstartswith: String? = nil, candidaciesPoliticianEducationNameLte: String? = nil, candidaciesPoliticianEducationGt: Int32? = nil, candidaciesPoliticianEducationIn: Int32? = nil, candidaciesPoliticianEducationGte: Int32? = nil, candidaciesPoliticianEducationLt: Int32? = nil, candidaciesPoliticianEducationLte: Int32? = nil, candidaciesPoliticianEducation: Int32? = nil, candidaciesPoliticianEthnicityNameGt: String? = nil, candidaciesPoliticianEthnicityNameYear: String? = nil, candidaciesPoliticianEthnicityNameMonth: String? = nil, candidaciesPoliticianEthnicityNameIsnull: String? = nil, candidaciesPoliticianEthnicityNameSecond: String? = nil, candidaciesPoliticianEthnicityNameWeekDay: String? = nil, candidaciesPoliticianEthnicityNameIn: String? = nil, candidaciesPoliticianEthnicityNameRegex: String? = nil, candidaciesPoliticianEthnicityNameGte: String? = nil, candidaciesPoliticianEthnicityNameContains: String? = nil, candidaciesPoliticianEthnicityNameLt: String? = nil, candidaciesPoliticianEthnicityNameStartswith: String? = nil, candidaciesPoliticianEthnicityNameIendswith: String? = nil, candidaciesPoliticianEthnicityNameIcontains: String? = nil, candidaciesPoliticianEthnicityNameIexact: String? = nil, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        politiciansGetWithRequestBuilder(limit: limit, offset: offset, candidaciesElectedGt: candidaciesElectedGt, candidaciesElectedYear: candidaciesElectedYear, candidaciesElectedMonth: candidaciesElectedMonth, candidaciesElectedIsnull: candidaciesElectedIsnull, candidaciesElectedSecond: candidaciesElectedSecond, candidaciesElectedWeekDay: candidaciesElectedWeekDay, candidaciesElectedIn: candidaciesElectedIn, candidaciesElectedRegex: candidaciesElectedRegex, candidaciesElectedGte: candidaciesElectedGte, candidaciesElectedContains: candidaciesElectedContains, candidaciesElectedLt: candidaciesElectedLt, candidaciesElectedStartswith: candidaciesElectedStartswith, candidaciesElectedIendswith: candidaciesElectedIendswith, candidaciesElectedIcontains: candidaciesElectedIcontains, candidaciesElectedIexact: candidaciesElectedIexact, candidaciesElected: candidaciesElected, candidaciesElectedDay: candidaciesElectedDay, candidaciesElectedMinute: candidaciesElectedMinute, candidaciesElectedSearch: candidaciesElectedSearch, candidaciesElectedHour: candidaciesElectedHour, candidaciesElectedIregex: candidaciesElectedIregex, candidaciesElectedEndswith: candidaciesElectedEndswith, candidaciesElectedRange: candidaciesElectedRange, candidaciesElectedIstartswith: candidaciesElectedIstartswith, candidaciesElectedLte: candidaciesElectedLte, candidaciesStateSiglumGt: candidaciesStateSiglumGt, candidaciesStateSiglumYear: candidaciesStateSiglumYear, candidaciesStateSiglumMonth: candidaciesStateSiglumMonth, candidaciesStateSiglumIsnull: candidaciesStateSiglumIsnull, candidaciesStateSiglumSecond: candidaciesStateSiglumSecond, candidaciesStateSiglumWeekDay: candidaciesStateSiglumWeekDay, candidaciesStateSiglumIn: candidaciesStateSiglumIn, candidaciesStateSiglumRegex: candidaciesStateSiglumRegex, candidaciesStateSiglumGte: candidaciesStateSiglumGte, candidaciesStateSiglumContains: candidaciesStateSiglumContains, candidaciesStateSiglumLt: candidaciesStateSiglumLt, candidaciesStateSiglumStartswith: candidaciesStateSiglumStartswith, candidaciesStateSiglumIendswith: candidaciesStateSiglumIendswith, candidaciesStateSiglumIcontains: candidaciesStateSiglumIcontains, candidaciesStateSiglumIexact: candidaciesStateSiglumIexact, candidaciesStateSiglum: candidaciesStateSiglum, candidaciesStateSiglumDay: candidaciesStateSiglumDay, candidaciesStateSiglumMinute: candidaciesStateSiglumMinute, candidaciesStateSiglumSearch: candidaciesStateSiglumSearch, candidaciesStateSiglumHour: candidaciesStateSiglumHour, candidaciesStateSiglumIregex: candidaciesStateSiglumIregex, candidaciesStateSiglumEndswith: candidaciesStateSiglumEndswith, candidaciesStateSiglumRange: candidaciesStateSiglumRange, candidaciesStateSiglumIstartswith: candidaciesStateSiglumIstartswith, candidaciesStateSiglumLte: candidaciesStateSiglumLte, candidaciesStateNameGt: candidaciesStateNameGt, candidaciesStateNameYear: candidaciesStateNameYear, candidaciesStateNameMonth: candidaciesStateNameMonth, candidaciesStateNameIsnull: candidaciesStateNameIsnull, candidaciesStateNameSecond: candidaciesStateNameSecond, candidaciesStateNameWeekDay: candidaciesStateNameWeekDay, candidaciesStateNameIn: candidaciesStateNameIn, candidaciesStateNameRegex: candidaciesStateNameRegex, candidaciesStateNameGte: candidaciesStateNameGte, candidaciesStateNameContains: candidaciesStateNameContains, candidaciesStateNameLt: candidaciesStateNameLt, candidaciesStateNameStartswith: candidaciesStateNameStartswith, candidaciesStateNameIendswith: candidaciesStateNameIendswith, candidaciesStateNameIcontains: candidaciesStateNameIcontains, candidaciesStateNameIexact: candidaciesStateNameIexact, candidaciesStateName: candidaciesStateName, candidaciesStateNameDay: candidaciesStateNameDay, candidaciesStateNameMinute: candidaciesStateNameMinute, candidaciesStateNameSearch: candidaciesStateNameSearch, candidaciesStateNameHour: candidaciesStateNameHour, candidaciesStateNameIregex: candidaciesStateNameIregex, candidaciesStateNameEndswith: candidaciesStateNameEndswith, candidaciesStateNameRange: candidaciesStateNameRange, candidaciesStateNameIstartswith: candidaciesStateNameIstartswith, candidaciesStateNameLte: candidaciesStateNameLte, candidaciesStateSlugGt: candidaciesStateSlugGt, candidaciesStateSlugYear: candidaciesStateSlugYear, candidaciesStateSlugMonth: candidaciesStateSlugMonth, candidaciesStateSlugIsnull: candidaciesStateSlugIsnull, candidaciesStateSlugSecond: candidaciesStateSlugSecond, candidaciesStateSlugWeekDay: candidaciesStateSlugWeekDay, candidaciesStateSlugIn: candidaciesStateSlugIn, candidaciesStateSlugRegex: candidaciesStateSlugRegex, candidaciesStateSlugGte: candidaciesStateSlugGte, candidaciesStateSlugContains: candidaciesStateSlugContains, candidaciesStateSlugLt: candidaciesStateSlugLt, candidaciesStateSlugStartswith: candidaciesStateSlugStartswith, candidaciesStateSlugIendswith: candidaciesStateSlugIendswith, candidaciesStateSlugIcontains: candidaciesStateSlugIcontains, candidaciesStateSlugIexact: candidaciesStateSlugIexact, candidaciesStateSlug: candidaciesStateSlug, candidaciesStateSlugDay: candidaciesStateSlugDay, candidaciesStateSlugMinute: candidaciesStateSlugMinute, candidaciesStateSlugSearch: candidaciesStateSlugSearch, candidaciesStateSlugHour: candidaciesStateSlugHour, candidaciesStateSlugIregex: candidaciesStateSlugIregex, candidaciesStateSlugEndswith: candidaciesStateSlugEndswith, candidaciesStateSlugRange: candidaciesStateSlugRange, candidaciesStateSlugIstartswith: candidaciesStateSlugIstartswith, candidaciesStateSlugLte: candidaciesStateSlugLte, candidaciesStateGt: candidaciesStateGt, candidaciesStateIn: candidaciesStateIn, candidaciesStateGte: candidaciesStateGte, candidaciesStateLt: candidaciesStateLt, candidaciesStateLte: candidaciesStateLte, candidaciesState: candidaciesState, candidaciesPoliticalOfficeNameGt: candidaciesPoliticalOfficeNameGt, candidaciesPoliticalOfficeNameYear: candidaciesPoliticalOfficeNameYear, candidaciesPoliticalOfficeNameMonth: candidaciesPoliticalOfficeNameMonth, candidaciesPoliticalOfficeNameIsnull: candidaciesPoliticalOfficeNameIsnull, candidaciesPoliticalOfficeNameSecond: candidaciesPoliticalOfficeNameSecond, candidaciesPoliticalOfficeNameWeekDay: candidaciesPoliticalOfficeNameWeekDay, candidaciesPoliticalOfficeNameIn: candidaciesPoliticalOfficeNameIn, candidaciesPoliticalOfficeNameRegex: candidaciesPoliticalOfficeNameRegex, candidaciesPoliticalOfficeNameGte: candidaciesPoliticalOfficeNameGte, candidaciesPoliticalOfficeNameContains: candidaciesPoliticalOfficeNameContains, candidaciesPoliticalOfficeNameLt: candidaciesPoliticalOfficeNameLt, candidaciesPoliticalOfficeNameStartswith: candidaciesPoliticalOfficeNameStartswith, candidaciesPoliticalOfficeNameIendswith: candidaciesPoliticalOfficeNameIendswith, candidaciesPoliticalOfficeNameIcontains: candidaciesPoliticalOfficeNameIcontains, candidaciesPoliticalOfficeNameIexact: candidaciesPoliticalOfficeNameIexact, candidaciesPoliticalOfficeName: candidaciesPoliticalOfficeName, candidaciesPoliticalOfficeNameDay: candidaciesPoliticalOfficeNameDay, candidaciesPoliticalOfficeNameMinute: candidaciesPoliticalOfficeNameMinute, candidaciesPoliticalOfficeNameSearch: candidaciesPoliticalOfficeNameSearch, candidaciesPoliticalOfficeNameHour: candidaciesPoliticalOfficeNameHour, candidaciesPoliticalOfficeNameIregex: candidaciesPoliticalOfficeNameIregex, candidaciesPoliticalOfficeNameEndswith: candidaciesPoliticalOfficeNameEndswith, candidaciesPoliticalOfficeNameRange: candidaciesPoliticalOfficeNameRange, candidaciesPoliticalOfficeNameIstartswith: candidaciesPoliticalOfficeNameIstartswith, candidaciesPoliticalOfficeNameLte: candidaciesPoliticalOfficeNameLte, candidaciesPoliticalOfficeSlugGt: candidaciesPoliticalOfficeSlugGt, candidaciesPoliticalOfficeSlugYear: candidaciesPoliticalOfficeSlugYear, candidaciesPoliticalOfficeSlugMonth: candidaciesPoliticalOfficeSlugMonth, candidaciesPoliticalOfficeSlugIsnull: candidaciesPoliticalOfficeSlugIsnull, candidaciesPoliticalOfficeSlugSecond: candidaciesPoliticalOfficeSlugSecond, candidaciesPoliticalOfficeSlugWeekDay: candidaciesPoliticalOfficeSlugWeekDay, candidaciesPoliticalOfficeSlugIn: candidaciesPoliticalOfficeSlugIn, candidaciesPoliticalOfficeSlugRegex: candidaciesPoliticalOfficeSlugRegex, candidaciesPoliticalOfficeSlugGte: candidaciesPoliticalOfficeSlugGte, candidaciesPoliticalOfficeSlugContains: candidaciesPoliticalOfficeSlugContains, candidaciesPoliticalOfficeSlugLt: candidaciesPoliticalOfficeSlugLt, candidaciesPoliticalOfficeSlugStartswith: candidaciesPoliticalOfficeSlugStartswith, candidaciesPoliticalOfficeSlugIendswith: candidaciesPoliticalOfficeSlugIendswith, candidaciesPoliticalOfficeSlugIcontains: candidaciesPoliticalOfficeSlugIcontains, candidaciesPoliticalOfficeSlugIexact: candidaciesPoliticalOfficeSlugIexact, candidaciesPoliticalOfficeSlug: candidaciesPoliticalOfficeSlug, candidaciesPoliticalOfficeSlugDay: candidaciesPoliticalOfficeSlugDay, candidaciesPoliticalOfficeSlugMinute: candidaciesPoliticalOfficeSlugMinute, candidaciesPoliticalOfficeSlugSearch: candidaciesPoliticalOfficeSlugSearch, candidaciesPoliticalOfficeSlugHour: candidaciesPoliticalOfficeSlugHour, candidaciesPoliticalOfficeSlugIregex: candidaciesPoliticalOfficeSlugIregex, candidaciesPoliticalOfficeSlugEndswith: candidaciesPoliticalOfficeSlugEndswith, candidaciesPoliticalOfficeSlugRange: candidaciesPoliticalOfficeSlugRange, candidaciesPoliticalOfficeSlugIstartswith: candidaciesPoliticalOfficeSlugIstartswith, candidaciesPoliticalOfficeSlugLte: candidaciesPoliticalOfficeSlugLte, candidaciesPoliticalOfficeGt: candidaciesPoliticalOfficeGt, candidaciesPoliticalOfficeIn: candidaciesPoliticalOfficeIn, candidaciesPoliticalOfficeGte: candidaciesPoliticalOfficeGte, candidaciesPoliticalOfficeLt: candidaciesPoliticalOfficeLt, candidaciesPoliticalOfficeLte: candidaciesPoliticalOfficeLte, candidaciesPoliticalOffice: candidaciesPoliticalOffice, candidaciesPoliticianNationalityNameGt: candidaciesPoliticianNationalityNameGt, candidaciesPoliticianNationalityNameYear: candidaciesPoliticianNationalityNameYear, candidaciesPoliticianNationalityNameMonth: candidaciesPoliticianNationalityNameMonth, candidaciesPoliticianNationalityNameIsnull: candidaciesPoliticianNationalityNameIsnull, candidaciesPoliticianNationalityNameSecond: candidaciesPoliticianNationalityNameSecond, candidaciesPoliticianNationalityNameWeekDay: candidaciesPoliticianNationalityNameWeekDay, candidaciesPoliticianNationalityNameIn: candidaciesPoliticianNationalityNameIn, candidaciesPoliticianNationalityNameRegex: candidaciesPoliticianNationalityNameRegex, candidaciesPoliticianNationalityNameGte: candidaciesPoliticianNationalityNameGte, candidaciesPoliticianNationalityNameContains: candidaciesPoliticianNationalityNameContains, candidaciesPoliticianNationalityNameLt: candidaciesPoliticianNationalityNameLt, candidaciesPoliticianNationalityNameStartswith: candidaciesPoliticianNationalityNameStartswith, candidaciesPoliticianNationalityNameIendswith: candidaciesPoliticianNationalityNameIendswith, candidaciesPoliticianNationalityNameIcontains: candidaciesPoliticianNationalityNameIcontains, candidaciesPoliticianNationalityNameIexact: candidaciesPoliticianNationalityNameIexact, candidaciesPoliticianNationalityName: candidaciesPoliticianNationalityName, candidaciesPoliticianNationalityNameDay: candidaciesPoliticianNationalityNameDay, candidaciesPoliticianNationalityNameMinute: candidaciesPoliticianNationalityNameMinute, candidaciesPoliticianNationalityNameSearch: candidaciesPoliticianNationalityNameSearch, candidaciesPoliticianNationalityNameHour: candidaciesPoliticianNationalityNameHour, candidaciesPoliticianNationalityNameIregex: candidaciesPoliticianNationalityNameIregex, candidaciesPoliticianNationalityNameEndswith: candidaciesPoliticianNationalityNameEndswith, candidaciesPoliticianNationalityNameRange: candidaciesPoliticianNationalityNameRange, candidaciesPoliticianNationalityNameIstartswith: candidaciesPoliticianNationalityNameIstartswith, candidaciesPoliticianNationalityNameLte: candidaciesPoliticianNationalityNameLte, candidaciesPoliticianNationalitySlugGt: candidaciesPoliticianNationalitySlugGt, candidaciesPoliticianNationalitySlugYear: candidaciesPoliticianNationalitySlugYear, candidaciesPoliticianNationalitySlugMonth: candidaciesPoliticianNationalitySlugMonth, candidaciesPoliticianNationalitySlugIsnull: candidaciesPoliticianNationalitySlugIsnull, candidaciesPoliticianNationalitySlugSecond: candidaciesPoliticianNationalitySlugSecond, candidaciesPoliticianNationalitySlugWeekDay: candidaciesPoliticianNationalitySlugWeekDay, candidaciesPoliticianNationalitySlugIn: candidaciesPoliticianNationalitySlugIn, candidaciesPoliticianNationalitySlugRegex: candidaciesPoliticianNationalitySlugRegex, candidaciesPoliticianNationalitySlugGte: candidaciesPoliticianNationalitySlugGte, candidaciesPoliticianNationalitySlugContains: candidaciesPoliticianNationalitySlugContains, candidaciesPoliticianNationalitySlugLt: candidaciesPoliticianNationalitySlugLt, candidaciesPoliticianNationalitySlugStartswith: candidaciesPoliticianNationalitySlugStartswith, candidaciesPoliticianNationalitySlugIendswith: candidaciesPoliticianNationalitySlugIendswith, candidaciesPoliticianNationalitySlugIcontains: candidaciesPoliticianNationalitySlugIcontains, candidaciesPoliticianNationalitySlugIexact: candidaciesPoliticianNationalitySlugIexact, candidaciesPoliticianNationalitySlug: candidaciesPoliticianNationalitySlug, candidaciesPoliticianNationalitySlugDay: candidaciesPoliticianNationalitySlugDay, candidaciesPoliticianNationalitySlugMinute: candidaciesPoliticianNationalitySlugMinute, candidaciesPoliticianNationalitySlugSearch: candidaciesPoliticianNationalitySlugSearch, candidaciesPoliticianNationalitySlugHour: candidaciesPoliticianNationalitySlugHour, candidaciesPoliticianNationalitySlugIregex: candidaciesPoliticianNationalitySlugIregex, candidaciesPoliticianNationalitySlugEndswith: candidaciesPoliticianNationalitySlugEndswith, candidaciesPoliticianNationalitySlugRange: candidaciesPoliticianNationalitySlugRange, candidaciesPoliticianNationalitySlugIstartswith: candidaciesPoliticianNationalitySlugIstartswith, candidaciesPoliticianNationalitySlugLte: candidaciesPoliticianNationalitySlugLte, candidaciesPoliticianNationalityGt: candidaciesPoliticianNationalityGt, candidaciesPoliticianNationalityIn: candidaciesPoliticianNationalityIn, candidaciesPoliticianNationalityGte: candidaciesPoliticianNationalityGte, candidaciesPoliticianNationalityLt: candidaciesPoliticianNationalityLt, candidaciesPoliticianNationalityLte: candidaciesPoliticianNationalityLte, candidaciesPoliticianNationality: candidaciesPoliticianNationality, candidaciesPoliticianEducationNameGt: candidaciesPoliticianEducationNameGt, candidaciesPoliticianEducationNameYear: candidaciesPoliticianEducationNameYear, candidaciesPoliticianEducationNameMonth: candidaciesPoliticianEducationNameMonth, candidaciesPoliticianEducationNameIsnull: candidaciesPoliticianEducationNameIsnull, candidaciesPoliticianEducationNameSecond: candidaciesPoliticianEducationNameSecond, candidaciesPoliticianEducationNameWeekDay: candidaciesPoliticianEducationNameWeekDay, candidaciesPoliticianEducationNameIn: candidaciesPoliticianEducationNameIn, candidaciesPoliticianEducationNameRegex: candidaciesPoliticianEducationNameRegex, candidaciesPoliticianEducationNameGte: candidaciesPoliticianEducationNameGte, candidaciesPoliticianEducationNameContains: candidaciesPoliticianEducationNameContains, candidaciesPoliticianEducationNameLt: candidaciesPoliticianEducationNameLt, candidaciesPoliticianEducationNameStartswith: candidaciesPoliticianEducationNameStartswith, candidaciesPoliticianEducationNameIendswith: candidaciesPoliticianEducationNameIendswith, candidaciesPoliticianEducationNameIcontains: candidaciesPoliticianEducationNameIcontains, candidaciesPoliticianEducationNameIexact: candidaciesPoliticianEducationNameIexact, candidaciesPoliticianEducationName: candidaciesPoliticianEducationName, candidaciesPoliticianEducationNameDay: candidaciesPoliticianEducationNameDay, candidaciesPoliticianEducationNameMinute: candidaciesPoliticianEducationNameMinute, candidaciesPoliticianEducationNameSearch: candidaciesPoliticianEducationNameSearch, candidaciesPoliticianEducationNameHour: candidaciesPoliticianEducationNameHour, candidaciesPoliticianEducationNameIregex: candidaciesPoliticianEducationNameIregex, candidaciesPoliticianEducationNameEndswith: candidaciesPoliticianEducationNameEndswith, candidaciesPoliticianEducationNameRange: candidaciesPoliticianEducationNameRange, candidaciesPoliticianEducationNameIstartswith: candidaciesPoliticianEducationNameIstartswith, candidaciesPoliticianEducationNameLte: candidaciesPoliticianEducationNameLte, candidaciesPoliticianEducationGt: candidaciesPoliticianEducationGt, candidaciesPoliticianEducationIn: candidaciesPoliticianEducationIn, candidaciesPoliticianEducationGte: candidaciesPoliticianEducationGte, candidaciesPoliticianEducationLt: candidaciesPoliticianEducationLt, candidaciesPoliticianEducationLte: candidaciesPoliticianEducationLte, candidaciesPoliticianEducation: candidaciesPoliticianEducation, candidaciesPoliticianEthnicityNameGt: candidaciesPoliticianEthnicityNameGt, candidaciesPoliticianEthnicityNameYear: candidaciesPoliticianEthnicityNameYear, candidaciesPoliticianEthnicityNameMonth: candidaciesPoliticianEthnicityNameMonth, candidaciesPoliticianEthnicityNameIsnull: candidaciesPoliticianEthnicityNameIsnull, candidaciesPoliticianEthnicityNameSecond: candidaciesPoliticianEthnicityNameSecond, candidaciesPoliticianEthnicityNameWeekDay: candidaciesPoliticianEthnicityNameWeekDay, candidaciesPoliticianEthnicityNameIn: candidaciesPoliticianEthnicityNameIn, candidaciesPoliticianEthnicityNameRegex: candidaciesPoliticianEthnicityNameRegex, candidaciesPoliticianEthnicityNameGte: candidaciesPoliticianEthnicityNameGte, candidaciesPoliticianEthnicityNameContains: candidaciesPoliticianEthnicityNameContains, candidaciesPoliticianEthnicityNameLt: candidaciesPoliticianEthnicityNameLt, candidaciesPoliticianEthnicityNameStartswith: candidaciesPoliticianEthnicityNameStartswith, candidaciesPoliticianEthnicityNameIendswith: candidaciesPoliticianEthnicityNameIendswith, candidaciesPoliticianEthnicityNameIcontains: candidaciesPoliticianEthnicityNameIcontains, candidaciesPoliticianEthnicityNameIexact: candidaciesPoliticianEthnicityNameIexact).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /politicians
     - 
     - examples: [{contentType=application/json, example={
  "meta" : {
    "next" : "aeiou",
    "previous" : "aeiou",
    "offset" : "",
    "total_count" : ""
  },
  "objects" : [ {
    "website" : "aeiou",
    "education" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789
    },
    "occupation" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789,
      "slug" : "aeiou"
    },
    "ethnicity" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : "",
      "slug" : "aeiou"
    },
    "gender" : "aeiou",
    "date_of_birth" : "2000-01-23T04:56:07.000+00:00",
    "political_parties" : [ {
      "date_start" : "2000-01-23T04:56:07.000+00:00",
      "resource_uri" : "aeiou",
      "date_end" : "2000-01-23T04:56:07.000+00:00",
      "id" : 123456789,
      "political_party" : {
        "website" : "aeiou",
        "siglum" : "aeiou",
        "tse_number" : "",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "founded_date" : "2000-01-23T04:56:07.000+00:00"
      }
    } ],
    "resource_uri" : "aeiou",
    "about" : "aeiou",
    "alternative_names" : [ {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789
    } ],
    "picture" : "aeiou",
    "place_of_birth" : "aeiou",
    "marital_status" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789,
      "slug" : "aeiou"
    },
    "nationality" : {
      "resource_uri" : "aeiou",
      "name" : "aeiou",
      "id" : 123456789,
      "slug" : "aeiou"
    },
    "cpf" : "aeiou",
    "name" : "aeiou",
    "id" : 123456789,
    "state" : "",
    "candidacies" : [ {
      "elected" : true,
      "institution" : {
        "website" : "aeiou",
        "siglum" : "aeiou",
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "political_offices" : [ {
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "description" : "aeiou",
          "term" : "",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        } ]
      },
      "political_office" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "description" : "aeiou",
        "term" : "",
        "id" : 123456789,
        "wikipedia" : "aeiou",
        "slug" : "aeiou"
      },
      "city" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "logo" : "aeiou",
        "id" : 123456789,
        "state" : {
          "country" : {
            "siglum" : "aeiou",
            "resource_uri" : "aeiou",
            "name" : "aeiou",
            "logo" : "aeiou",
            "id" : 123456789,
            "wikipedia" : "aeiou",
            "slug" : "aeiou"
          },
          "siglum" : "aeiou",
          "resource_uri" : "aeiou",
          "name" : "aeiou",
          "logo" : "aeiou",
          "id" : 123456789,
          "wikipedia" : "aeiou",
          "slug" : "aeiou"
        }
      },
      "election_round" : {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "round_number" : "",
        "election" : "aeiou",
        "resource_uri" : "aeiou",
        "id" : 123456789
      },
      "resource_uri" : "aeiou",
      "candidacy_status" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789
      },
      "id" : 123456789,
      "state" : ""
    } ],
    "email" : "aeiou",
    "events" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "resource_uri" : "aeiou",
      "description" : "aeiou",
      "id" : 123456789,
      "politician_event_type" : {
        "resource_uri" : "aeiou",
        "name" : "aeiou",
        "id" : 123456789,
        "slug" : "aeiou"
      }
    } ]
  } ]
}}]
     
     - parameter limit: (query) Specify the number of element to display per page. (optional)
     - parameter offset: (query) Specify the offset to start displaying element on a page. (optional)
     - parameter candidaciesElectedGt: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedYear: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedMonth: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIsnull: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedSecond: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedWeekDay: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIn: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedRegex: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedGte: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedContains: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedLt: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedStartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIendswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIcontains: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIexact: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElected: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedDay: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedMinute: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedSearch: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedHour: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIregex: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedEndswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedRange: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedIstartswith: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesElectedLte: (query) Boolean data. Ex: True (optional)
     - parameter candidaciesStateSiglumGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglum: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSiglumLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesStateGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesStateLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesState: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeSlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticalOfficeGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOfficeLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticalOffice: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlug: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalitySlugLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianNationalityGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationalityLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianNationality: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationName: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameMinute: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameSearch: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameHour: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIregex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameEndswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameRange: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameIstartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationNameLte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEducationGt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationIn: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationGte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationLt: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducationLte: (query) A single related resource. Can be either a URI or set of nested resource data. (optional)
     - parameter candidaciesPoliticianEducation: (query) A single related resource. Can be either a URI or set of nestedresource data. (optional)
     - parameter candidaciesPoliticianEthnicityNameGt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameYear: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameMonth: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIsnull: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameSecond: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameWeekDay: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIn: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameRegex: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameGte: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameContains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameLt: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameStartswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIendswith: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIcontains: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)
     - parameter candidaciesPoliticianEthnicityNameIexact: (query) Unicode string data. Ex: \&quot;Hello World\&quot; (optional)

     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func politiciansGetWithRequestBuilder(limit: Int32? = nil, offset: Int32? = nil, candidaciesElectedGt: Bool? = nil, candidaciesElectedYear: Bool? = nil, candidaciesElectedMonth: Bool? = nil, candidaciesElectedIsnull: Bool? = nil, candidaciesElectedSecond: Bool? = nil, candidaciesElectedWeekDay: Bool? = nil, candidaciesElectedIn: Bool? = nil, candidaciesElectedRegex: Bool? = nil, candidaciesElectedGte: Bool? = nil, candidaciesElectedContains: Bool? = nil, candidaciesElectedLt: Bool? = nil, candidaciesElectedStartswith: Bool? = nil, candidaciesElectedIendswith: Bool? = nil, candidaciesElectedIcontains: Bool? = nil, candidaciesElectedIexact: Bool? = nil, candidaciesElected: Bool? = nil, candidaciesElectedDay: Bool? = nil, candidaciesElectedMinute: Bool? = nil, candidaciesElectedSearch: Bool? = nil, candidaciesElectedHour: Bool? = nil, candidaciesElectedIregex: Bool? = nil, candidaciesElectedEndswith: Bool? = nil, candidaciesElectedRange: Bool? = nil, candidaciesElectedIstartswith: Bool? = nil, candidaciesElectedLte: Bool? = nil, candidaciesStateSiglumGt: String? = nil, candidaciesStateSiglumYear: String? = nil, candidaciesStateSiglumMonth: String? = nil, candidaciesStateSiglumIsnull: String? = nil, candidaciesStateSiglumSecond: String? = nil, candidaciesStateSiglumWeekDay: String? = nil, candidaciesStateSiglumIn: String? = nil, candidaciesStateSiglumRegex: String? = nil, candidaciesStateSiglumGte: String? = nil, candidaciesStateSiglumContains: String? = nil, candidaciesStateSiglumLt: String? = nil, candidaciesStateSiglumStartswith: String? = nil, candidaciesStateSiglumIendswith: String? = nil, candidaciesStateSiglumIcontains: String? = nil, candidaciesStateSiglumIexact: String? = nil, candidaciesStateSiglum: String? = nil, candidaciesStateSiglumDay: String? = nil, candidaciesStateSiglumMinute: String? = nil, candidaciesStateSiglumSearch: String? = nil, candidaciesStateSiglumHour: String? = nil, candidaciesStateSiglumIregex: String? = nil, candidaciesStateSiglumEndswith: String? = nil, candidaciesStateSiglumRange: String? = nil, candidaciesStateSiglumIstartswith: String? = nil, candidaciesStateSiglumLte: String? = nil, candidaciesStateNameGt: String? = nil, candidaciesStateNameYear: String? = nil, candidaciesStateNameMonth: String? = nil, candidaciesStateNameIsnull: String? = nil, candidaciesStateNameSecond: String? = nil, candidaciesStateNameWeekDay: String? = nil, candidaciesStateNameIn: String? = nil, candidaciesStateNameRegex: String? = nil, candidaciesStateNameGte: String? = nil, candidaciesStateNameContains: String? = nil, candidaciesStateNameLt: String? = nil, candidaciesStateNameStartswith: String? = nil, candidaciesStateNameIendswith: String? = nil, candidaciesStateNameIcontains: String? = nil, candidaciesStateNameIexact: String? = nil, candidaciesStateName: String? = nil, candidaciesStateNameDay: String? = nil, candidaciesStateNameMinute: String? = nil, candidaciesStateNameSearch: String? = nil, candidaciesStateNameHour: String? = nil, candidaciesStateNameIregex: String? = nil, candidaciesStateNameEndswith: String? = nil, candidaciesStateNameRange: String? = nil, candidaciesStateNameIstartswith: String? = nil, candidaciesStateNameLte: String? = nil, candidaciesStateSlugGt: String? = nil, candidaciesStateSlugYear: String? = nil, candidaciesStateSlugMonth: String? = nil, candidaciesStateSlugIsnull: String? = nil, candidaciesStateSlugSecond: String? = nil, candidaciesStateSlugWeekDay: String? = nil, candidaciesStateSlugIn: String? = nil, candidaciesStateSlugRegex: String? = nil, candidaciesStateSlugGte: String? = nil, candidaciesStateSlugContains: String? = nil, candidaciesStateSlugLt: String? = nil, candidaciesStateSlugStartswith: String? = nil, candidaciesStateSlugIendswith: String? = nil, candidaciesStateSlugIcontains: String? = nil, candidaciesStateSlugIexact: String? = nil, candidaciesStateSlug: String? = nil, candidaciesStateSlugDay: String? = nil, candidaciesStateSlugMinute: String? = nil, candidaciesStateSlugSearch: String? = nil, candidaciesStateSlugHour: String? = nil, candidaciesStateSlugIregex: String? = nil, candidaciesStateSlugEndswith: String? = nil, candidaciesStateSlugRange: String? = nil, candidaciesStateSlugIstartswith: String? = nil, candidaciesStateSlugLte: String? = nil, candidaciesStateGt: Int32? = nil, candidaciesStateIn: Int32? = nil, candidaciesStateGte: Int32? = nil, candidaciesStateLt: Int32? = nil, candidaciesStateLte: Int32? = nil, candidaciesState: Int32? = nil, candidaciesPoliticalOfficeNameGt: String? = nil, candidaciesPoliticalOfficeNameYear: String? = nil, candidaciesPoliticalOfficeNameMonth: String? = nil, candidaciesPoliticalOfficeNameIsnull: String? = nil, candidaciesPoliticalOfficeNameSecond: String? = nil, candidaciesPoliticalOfficeNameWeekDay: String? = nil, candidaciesPoliticalOfficeNameIn: String? = nil, candidaciesPoliticalOfficeNameRegex: String? = nil, candidaciesPoliticalOfficeNameGte: String? = nil, candidaciesPoliticalOfficeNameContains: String? = nil, candidaciesPoliticalOfficeNameLt: String? = nil, candidaciesPoliticalOfficeNameStartswith: String? = nil, candidaciesPoliticalOfficeNameIendswith: String? = nil, candidaciesPoliticalOfficeNameIcontains: String? = nil, candidaciesPoliticalOfficeNameIexact: String? = nil, candidaciesPoliticalOfficeName: String? = nil, candidaciesPoliticalOfficeNameDay: String? = nil, candidaciesPoliticalOfficeNameMinute: String? = nil, candidaciesPoliticalOfficeNameSearch: String? = nil, candidaciesPoliticalOfficeNameHour: String? = nil, candidaciesPoliticalOfficeNameIregex: String? = nil, candidaciesPoliticalOfficeNameEndswith: String? = nil, candidaciesPoliticalOfficeNameRange: String? = nil, candidaciesPoliticalOfficeNameIstartswith: String? = nil, candidaciesPoliticalOfficeNameLte: String? = nil, candidaciesPoliticalOfficeSlugGt: String? = nil, candidaciesPoliticalOfficeSlugYear: String? = nil, candidaciesPoliticalOfficeSlugMonth: String? = nil, candidaciesPoliticalOfficeSlugIsnull: String? = nil, candidaciesPoliticalOfficeSlugSecond: String? = nil, candidaciesPoliticalOfficeSlugWeekDay: String? = nil, candidaciesPoliticalOfficeSlugIn: String? = nil, candidaciesPoliticalOfficeSlugRegex: String? = nil, candidaciesPoliticalOfficeSlugGte: String? = nil, candidaciesPoliticalOfficeSlugContains: String? = nil, candidaciesPoliticalOfficeSlugLt: String? = nil, candidaciesPoliticalOfficeSlugStartswith: String? = nil, candidaciesPoliticalOfficeSlugIendswith: String? = nil, candidaciesPoliticalOfficeSlugIcontains: String? = nil, candidaciesPoliticalOfficeSlugIexact: String? = nil, candidaciesPoliticalOfficeSlug: String? = nil, candidaciesPoliticalOfficeSlugDay: String? = nil, candidaciesPoliticalOfficeSlugMinute: String? = nil, candidaciesPoliticalOfficeSlugSearch: String? = nil, candidaciesPoliticalOfficeSlugHour: String? = nil, candidaciesPoliticalOfficeSlugIregex: String? = nil, candidaciesPoliticalOfficeSlugEndswith: String? = nil, candidaciesPoliticalOfficeSlugRange: String? = nil, candidaciesPoliticalOfficeSlugIstartswith: String? = nil, candidaciesPoliticalOfficeSlugLte: String? = nil, candidaciesPoliticalOfficeGt: Int32? = nil, candidaciesPoliticalOfficeIn: Int32? = nil, candidaciesPoliticalOfficeGte: Int32? = nil, candidaciesPoliticalOfficeLt: Int32? = nil, candidaciesPoliticalOfficeLte: Int32? = nil, candidaciesPoliticalOffice: Int32? = nil, candidaciesPoliticianNationalityNameGt: String? = nil, candidaciesPoliticianNationalityNameYear: String? = nil, candidaciesPoliticianNationalityNameMonth: String? = nil, candidaciesPoliticianNationalityNameIsnull: String? = nil, candidaciesPoliticianNationalityNameSecond: String? = nil, candidaciesPoliticianNationalityNameWeekDay: String? = nil, candidaciesPoliticianNationalityNameIn: String? = nil, candidaciesPoliticianNationalityNameRegex: String? = nil, candidaciesPoliticianNationalityNameGte: String? = nil, candidaciesPoliticianNationalityNameContains: String? = nil, candidaciesPoliticianNationalityNameLt: String? = nil, candidaciesPoliticianNationalityNameStartswith: String? = nil, candidaciesPoliticianNationalityNameIendswith: String? = nil, candidaciesPoliticianNationalityNameIcontains: String? = nil, candidaciesPoliticianNationalityNameIexact: String? = nil, candidaciesPoliticianNationalityName: String? = nil, candidaciesPoliticianNationalityNameDay: String? = nil, candidaciesPoliticianNationalityNameMinute: String? = nil, candidaciesPoliticianNationalityNameSearch: String? = nil, candidaciesPoliticianNationalityNameHour: String? = nil, candidaciesPoliticianNationalityNameIregex: String? = nil, candidaciesPoliticianNationalityNameEndswith: String? = nil, candidaciesPoliticianNationalityNameRange: String? = nil, candidaciesPoliticianNationalityNameIstartswith: String? = nil, candidaciesPoliticianNationalityNameLte: String? = nil, candidaciesPoliticianNationalitySlugGt: String? = nil, candidaciesPoliticianNationalitySlugYear: String? = nil, candidaciesPoliticianNationalitySlugMonth: String? = nil, candidaciesPoliticianNationalitySlugIsnull: String? = nil, candidaciesPoliticianNationalitySlugSecond: String? = nil, candidaciesPoliticianNationalitySlugWeekDay: String? = nil, candidaciesPoliticianNationalitySlugIn: String? = nil, candidaciesPoliticianNationalitySlugRegex: String? = nil, candidaciesPoliticianNationalitySlugGte: String? = nil, candidaciesPoliticianNationalitySlugContains: String? = nil, candidaciesPoliticianNationalitySlugLt: String? = nil, candidaciesPoliticianNationalitySlugStartswith: String? = nil, candidaciesPoliticianNationalitySlugIendswith: String? = nil, candidaciesPoliticianNationalitySlugIcontains: String? = nil, candidaciesPoliticianNationalitySlugIexact: String? = nil, candidaciesPoliticianNationalitySlug: String? = nil, candidaciesPoliticianNationalitySlugDay: String? = nil, candidaciesPoliticianNationalitySlugMinute: String? = nil, candidaciesPoliticianNationalitySlugSearch: String? = nil, candidaciesPoliticianNationalitySlugHour: String? = nil, candidaciesPoliticianNationalitySlugIregex: String? = nil, candidaciesPoliticianNationalitySlugEndswith: String? = nil, candidaciesPoliticianNationalitySlugRange: String? = nil, candidaciesPoliticianNationalitySlugIstartswith: String? = nil, candidaciesPoliticianNationalitySlugLte: String? = nil, candidaciesPoliticianNationalityGt: Int32? = nil, candidaciesPoliticianNationalityIn: Int32? = nil, candidaciesPoliticianNationalityGte: Int32? = nil, candidaciesPoliticianNationalityLt: Int32? = nil, candidaciesPoliticianNationalityLte: Int32? = nil, candidaciesPoliticianNationality: Int32? = nil, candidaciesPoliticianEducationNameGt: String? = nil, candidaciesPoliticianEducationNameYear: String? = nil, candidaciesPoliticianEducationNameMonth: String? = nil, candidaciesPoliticianEducationNameIsnull: String? = nil, candidaciesPoliticianEducationNameSecond: String? = nil, candidaciesPoliticianEducationNameWeekDay: String? = nil, candidaciesPoliticianEducationNameIn: String? = nil, candidaciesPoliticianEducationNameRegex: String? = nil, candidaciesPoliticianEducationNameGte: String? = nil, candidaciesPoliticianEducationNameContains: String? = nil, candidaciesPoliticianEducationNameLt: String? = nil, candidaciesPoliticianEducationNameStartswith: String? = nil, candidaciesPoliticianEducationNameIendswith: String? = nil, candidaciesPoliticianEducationNameIcontains: String? = nil, candidaciesPoliticianEducationNameIexact: String? = nil, candidaciesPoliticianEducationName: String? = nil, candidaciesPoliticianEducationNameDay: String? = nil, candidaciesPoliticianEducationNameMinute: String? = nil, candidaciesPoliticianEducationNameSearch: String? = nil, candidaciesPoliticianEducationNameHour: String? = nil, candidaciesPoliticianEducationNameIregex: String? = nil, candidaciesPoliticianEducationNameEndswith: String? = nil, candidaciesPoliticianEducationNameRange: String? = nil, candidaciesPoliticianEducationNameIstartswith: String? = nil, candidaciesPoliticianEducationNameLte: String? = nil, candidaciesPoliticianEducationGt: Int32? = nil, candidaciesPoliticianEducationIn: Int32? = nil, candidaciesPoliticianEducationGte: Int32? = nil, candidaciesPoliticianEducationLt: Int32? = nil, candidaciesPoliticianEducationLte: Int32? = nil, candidaciesPoliticianEducation: Int32? = nil, candidaciesPoliticianEthnicityNameGt: String? = nil, candidaciesPoliticianEthnicityNameYear: String? = nil, candidaciesPoliticianEthnicityNameMonth: String? = nil, candidaciesPoliticianEthnicityNameIsnull: String? = nil, candidaciesPoliticianEthnicityNameSecond: String? = nil, candidaciesPoliticianEthnicityNameWeekDay: String? = nil, candidaciesPoliticianEthnicityNameIn: String? = nil, candidaciesPoliticianEthnicityNameRegex: String? = nil, candidaciesPoliticianEthnicityNameGte: String? = nil, candidaciesPoliticianEthnicityNameContains: String? = nil, candidaciesPoliticianEthnicityNameLt: String? = nil, candidaciesPoliticianEthnicityNameStartswith: String? = nil, candidaciesPoliticianEthnicityNameIendswith: String? = nil, candidaciesPoliticianEthnicityNameIcontains: String? = nil, candidaciesPoliticianEthnicityNameIexact: String? = nil) -> RequestBuilder<InlineResponse2006> {
        let path = "/politicians"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "candidacies__elected__gt": candidaciesElectedGt,
            "candidacies__elected__year": candidaciesElectedYear,
            "candidacies__elected__month": candidaciesElectedMonth,
            "candidacies__elected__isnull": candidaciesElectedIsnull,
            "candidacies__elected__second": candidaciesElectedSecond,
            "candidacies__elected__week_day": candidaciesElectedWeekDay,
            "candidacies__elected__in": candidaciesElectedIn,
            "candidacies__elected__regex": candidaciesElectedRegex,
            "candidacies__elected__gte": candidaciesElectedGte,
            "candidacies__elected__contains": candidaciesElectedContains,
            "candidacies__elected__lt": candidaciesElectedLt,
            "candidacies__elected__startswith": candidaciesElectedStartswith,
            "candidacies__elected__iendswith": candidaciesElectedIendswith,
            "candidacies__elected__icontains": candidaciesElectedIcontains,
            "candidacies__elected__iexact": candidaciesElectedIexact,
            "candidacies__elected": candidaciesElected,
            "candidacies__elected__day": candidaciesElectedDay,
            "candidacies__elected__minute": candidaciesElectedMinute,
            "candidacies__elected__search": candidaciesElectedSearch,
            "candidacies__elected__hour": candidaciesElectedHour,
            "candidacies__elected__iregex": candidaciesElectedIregex,
            "candidacies__elected__endswith": candidaciesElectedEndswith,
            "candidacies__elected__range": candidaciesElectedRange,
            "candidacies__elected__istartswith": candidaciesElectedIstartswith,
            "candidacies__elected__lte": candidaciesElectedLte,
            "candidacies__state__siglum__gt": candidaciesStateSiglumGt,
            "candidacies__state__siglum__year": candidaciesStateSiglumYear,
            "candidacies__state__siglum__month": candidaciesStateSiglumMonth,
            "candidacies__state__siglum__isnull": candidaciesStateSiglumIsnull,
            "candidacies__state__siglum__second": candidaciesStateSiglumSecond,
            "candidacies__state__siglum__week_day": candidaciesStateSiglumWeekDay,
            "candidacies__state__siglum__in": candidaciesStateSiglumIn,
            "candidacies__state__siglum__regex": candidaciesStateSiglumRegex,
            "candidacies__state__siglum__gte": candidaciesStateSiglumGte,
            "candidacies__state__siglum__contains": candidaciesStateSiglumContains,
            "candidacies__state__siglum__lt": candidaciesStateSiglumLt,
            "candidacies__state__siglum__startswith": candidaciesStateSiglumStartswith,
            "candidacies__state__siglum__iendswith": candidaciesStateSiglumIendswith,
            "candidacies__state__siglum__icontains": candidaciesStateSiglumIcontains,
            "candidacies__state__siglum__iexact": candidaciesStateSiglumIexact,
            "candidacies__state__siglum": candidaciesStateSiglum,
            "candidacies__state__siglum__day": candidaciesStateSiglumDay,
            "candidacies__state__siglum__minute": candidaciesStateSiglumMinute,
            "candidacies__state__siglum__search": candidaciesStateSiglumSearch,
            "candidacies__state__siglum__hour": candidaciesStateSiglumHour,
            "candidacies__state__siglum__iregex": candidaciesStateSiglumIregex,
            "candidacies__state__siglum__endswith": candidaciesStateSiglumEndswith,
            "candidacies__state__siglum__range": candidaciesStateSiglumRange,
            "candidacies__state__siglum__istartswith": candidaciesStateSiglumIstartswith,
            "candidacies__state__siglum__lte": candidaciesStateSiglumLte,
            "candidacies__state__name__gt": candidaciesStateNameGt,
            "candidacies__state__name__year": candidaciesStateNameYear,
            "candidacies__state__name__month": candidaciesStateNameMonth,
            "candidacies__state__name__isnull": candidaciesStateNameIsnull,
            "candidacies__state__name__second": candidaciesStateNameSecond,
            "candidacies__state__name__week_day": candidaciesStateNameWeekDay,
            "candidacies__state__name__in": candidaciesStateNameIn,
            "candidacies__state__name__regex": candidaciesStateNameRegex,
            "candidacies__state__name__gte": candidaciesStateNameGte,
            "candidacies__state__name__contains": candidaciesStateNameContains,
            "candidacies__state__name__lt": candidaciesStateNameLt,
            "candidacies__state__name__startswith": candidaciesStateNameStartswith,
            "candidacies__state__name__iendswith": candidaciesStateNameIendswith,
            "candidacies__state__name__icontains": candidaciesStateNameIcontains,
            "candidacies__state__name__iexact": candidaciesStateNameIexact,
            "candidacies__state__name": candidaciesStateName,
            "candidacies__state__name__day": candidaciesStateNameDay,
            "candidacies__state__name__minute": candidaciesStateNameMinute,
            "candidacies__state__name__search": candidaciesStateNameSearch,
            "candidacies__state__name__hour": candidaciesStateNameHour,
            "candidacies__state__name__iregex": candidaciesStateNameIregex,
            "candidacies__state__name__endswith": candidaciesStateNameEndswith,
            "candidacies__state__name__range": candidaciesStateNameRange,
            "candidacies__state__name__istartswith": candidaciesStateNameIstartswith,
            "candidacies__state__name__lte": candidaciesStateNameLte,
            "candidacies__state__slug__gt": candidaciesStateSlugGt,
            "candidacies__state__slug__year": candidaciesStateSlugYear,
            "candidacies__state__slug__month": candidaciesStateSlugMonth,
            "candidacies__state__slug__isnull": candidaciesStateSlugIsnull,
            "candidacies__state__slug__second": candidaciesStateSlugSecond,
            "candidacies__state__slug__week_day": candidaciesStateSlugWeekDay,
            "candidacies__state__slug__in": candidaciesStateSlugIn,
            "candidacies__state__slug__regex": candidaciesStateSlugRegex,
            "candidacies__state__slug__gte": candidaciesStateSlugGte,
            "candidacies__state__slug__contains": candidaciesStateSlugContains,
            "candidacies__state__slug__lt": candidaciesStateSlugLt,
            "candidacies__state__slug__startswith": candidaciesStateSlugStartswith,
            "candidacies__state__slug__iendswith": candidaciesStateSlugIendswith,
            "candidacies__state__slug__icontains": candidaciesStateSlugIcontains,
            "candidacies__state__slug__iexact": candidaciesStateSlugIexact,
            "candidacies__state__slug": candidaciesStateSlug,
            "candidacies__state__slug__day": candidaciesStateSlugDay,
            "candidacies__state__slug__minute": candidaciesStateSlugMinute,
            "candidacies__state__slug__search": candidaciesStateSlugSearch,
            "candidacies__state__slug__hour": candidaciesStateSlugHour,
            "candidacies__state__slug__iregex": candidaciesStateSlugIregex,
            "candidacies__state__slug__endswith": candidaciesStateSlugEndswith,
            "candidacies__state__slug__range": candidaciesStateSlugRange,
            "candidacies__state__slug__istartswith": candidaciesStateSlugIstartswith,
            "candidacies__state__slug__lte": candidaciesStateSlugLte,
            "candidacies__state__gt": candidaciesStateGt?.encodeToJSON(),
            "candidacies__state__in": candidaciesStateIn?.encodeToJSON(),
            "candidacies__state__gte": candidaciesStateGte?.encodeToJSON(),
            "candidacies__state__lt": candidaciesStateLt?.encodeToJSON(),
            "candidacies__state__lte": candidaciesStateLte?.encodeToJSON(),
            "candidacies__state": candidaciesState?.encodeToJSON(),
            "candidacies__political_office__name__gt": candidaciesPoliticalOfficeNameGt,
            "candidacies__political_office__name__year": candidaciesPoliticalOfficeNameYear,
            "candidacies__political_office__name__month": candidaciesPoliticalOfficeNameMonth,
            "candidacies__political_office__name__isnull": candidaciesPoliticalOfficeNameIsnull,
            "candidacies__political_office__name__second": candidaciesPoliticalOfficeNameSecond,
            "candidacies__political_office__name__week_day": candidaciesPoliticalOfficeNameWeekDay,
            "candidacies__political_office__name__in": candidaciesPoliticalOfficeNameIn,
            "candidacies__political_office__name__regex": candidaciesPoliticalOfficeNameRegex,
            "candidacies__political_office__name__gte": candidaciesPoliticalOfficeNameGte,
            "candidacies__political_office__name__contains": candidaciesPoliticalOfficeNameContains,
            "candidacies__political_office__name__lt": candidaciesPoliticalOfficeNameLt,
            "candidacies__political_office__name__startswith": candidaciesPoliticalOfficeNameStartswith,
            "candidacies__political_office__name__iendswith": candidaciesPoliticalOfficeNameIendswith,
            "candidacies__political_office__name__icontains": candidaciesPoliticalOfficeNameIcontains,
            "candidacies__political_office__name__iexact": candidaciesPoliticalOfficeNameIexact,
            "candidacies__political_office__name": candidaciesPoliticalOfficeName,
            "candidacies__political_office__name__day": candidaciesPoliticalOfficeNameDay,
            "candidacies__political_office__name__minute": candidaciesPoliticalOfficeNameMinute,
            "candidacies__political_office__name__search": candidaciesPoliticalOfficeNameSearch,
            "candidacies__political_office__name__hour": candidaciesPoliticalOfficeNameHour,
            "candidacies__political_office__name__iregex": candidaciesPoliticalOfficeNameIregex,
            "candidacies__political_office__name__endswith": candidaciesPoliticalOfficeNameEndswith,
            "candidacies__political_office__name__range": candidaciesPoliticalOfficeNameRange,
            "candidacies__political_office__name__istartswith": candidaciesPoliticalOfficeNameIstartswith,
            "candidacies__political_office__name__lte": candidaciesPoliticalOfficeNameLte,
            "candidacies__political_office__slug__gt": candidaciesPoliticalOfficeSlugGt,
            "candidacies__political_office__slug__year": candidaciesPoliticalOfficeSlugYear,
            "candidacies__political_office__slug__month": candidaciesPoliticalOfficeSlugMonth,
            "candidacies__political_office__slug__isnull": candidaciesPoliticalOfficeSlugIsnull,
            "candidacies__political_office__slug__second": candidaciesPoliticalOfficeSlugSecond,
            "candidacies__political_office__slug__week_day": candidaciesPoliticalOfficeSlugWeekDay,
            "candidacies__political_office__slug__in": candidaciesPoliticalOfficeSlugIn,
            "candidacies__political_office__slug__regex": candidaciesPoliticalOfficeSlugRegex,
            "candidacies__political_office__slug__gte": candidaciesPoliticalOfficeSlugGte,
            "candidacies__political_office__slug__contains": candidaciesPoliticalOfficeSlugContains,
            "candidacies__political_office__slug__lt": candidaciesPoliticalOfficeSlugLt,
            "candidacies__political_office__slug__startswith": candidaciesPoliticalOfficeSlugStartswith,
            "candidacies__political_office__slug__iendswith": candidaciesPoliticalOfficeSlugIendswith,
            "candidacies__political_office__slug__icontains": candidaciesPoliticalOfficeSlugIcontains,
            "candidacies__political_office__slug__iexact": candidaciesPoliticalOfficeSlugIexact,
            "candidacies__political_office__slug": candidaciesPoliticalOfficeSlug,
            "candidacies__political_office__slug__day": candidaciesPoliticalOfficeSlugDay,
            "candidacies__political_office__slug__minute": candidaciesPoliticalOfficeSlugMinute,
            "candidacies__political_office__slug__search": candidaciesPoliticalOfficeSlugSearch,
            "candidacies__political_office__slug__hour": candidaciesPoliticalOfficeSlugHour,
            "candidacies__political_office__slug__iregex": candidaciesPoliticalOfficeSlugIregex,
            "candidacies__political_office__slug__endswith": candidaciesPoliticalOfficeSlugEndswith,
            "candidacies__political_office__slug__range": candidaciesPoliticalOfficeSlugRange,
            "candidacies__political_office__slug__istartswith": candidaciesPoliticalOfficeSlugIstartswith,
            "candidacies__political_office__slug__lte": candidaciesPoliticalOfficeSlugLte,
            "candidacies__political_office__gt": candidaciesPoliticalOfficeGt?.encodeToJSON(),
            "candidacies__political_office__in": candidaciesPoliticalOfficeIn?.encodeToJSON(),
            "candidacies__political_office__gte": candidaciesPoliticalOfficeGte?.encodeToJSON(),
            "candidacies__political_office__lt": candidaciesPoliticalOfficeLt?.encodeToJSON(),
            "candidacies__political_office__lte": candidaciesPoliticalOfficeLte?.encodeToJSON(),
            "candidacies__political_office": candidaciesPoliticalOffice?.encodeToJSON(),
            "candidacies__politician__nationality__name__gt": candidaciesPoliticianNationalityNameGt,
            "candidacies__politician__nationality__name__year": candidaciesPoliticianNationalityNameYear,
            "candidacies__politician__nationality__name__month": candidaciesPoliticianNationalityNameMonth,
            "candidacies__politician__nationality__name__isnull": candidaciesPoliticianNationalityNameIsnull,
            "candidacies__politician__nationality__name__second": candidaciesPoliticianNationalityNameSecond,
            "candidacies__politician__nationality__name__week_day": candidaciesPoliticianNationalityNameWeekDay,
            "candidacies__politician__nationality__name__in": candidaciesPoliticianNationalityNameIn,
            "candidacies__politician__nationality__name__regex": candidaciesPoliticianNationalityNameRegex,
            "candidacies__politician__nationality__name__gte": candidaciesPoliticianNationalityNameGte,
            "candidacies__politician__nationality__name__contains": candidaciesPoliticianNationalityNameContains,
            "candidacies__politician__nationality__name__lt": candidaciesPoliticianNationalityNameLt,
            "candidacies__politician__nationality__name__startswith": candidaciesPoliticianNationalityNameStartswith,
            "candidacies__politician__nationality__name__iendswith": candidaciesPoliticianNationalityNameIendswith,
            "candidacies__politician__nationality__name__icontains": candidaciesPoliticianNationalityNameIcontains,
            "candidacies__politician__nationality__name__iexact": candidaciesPoliticianNationalityNameIexact,
            "candidacies__politician__nationality__name": candidaciesPoliticianNationalityName,
            "candidacies__politician__nationality__name__day": candidaciesPoliticianNationalityNameDay,
            "candidacies__politician__nationality__name__minute": candidaciesPoliticianNationalityNameMinute,
            "candidacies__politician__nationality__name__search": candidaciesPoliticianNationalityNameSearch,
            "candidacies__politician__nationality__name__hour": candidaciesPoliticianNationalityNameHour,
            "candidacies__politician__nationality__name__iregex": candidaciesPoliticianNationalityNameIregex,
            "candidacies__politician__nationality__name__endswith": candidaciesPoliticianNationalityNameEndswith,
            "candidacies__politician__nationality__name__range": candidaciesPoliticianNationalityNameRange,
            "candidacies__politician__nationality__name__istartswith": candidaciesPoliticianNationalityNameIstartswith,
            "candidacies__politician__nationality__name__lte": candidaciesPoliticianNationalityNameLte,
            "candidacies__politician__nationality__slug__gt": candidaciesPoliticianNationalitySlugGt,
            "candidacies__politician__nationality__slug__year": candidaciesPoliticianNationalitySlugYear,
            "candidacies__politician__nationality__slug__month": candidaciesPoliticianNationalitySlugMonth,
            "candidacies__politician__nationality__slug__isnull": candidaciesPoliticianNationalitySlugIsnull,
            "candidacies__politician__nationality__slug__second": candidaciesPoliticianNationalitySlugSecond,
            "candidacies__politician__nationality__slug__week_day": candidaciesPoliticianNationalitySlugWeekDay,
            "candidacies__politician__nationality__slug__in": candidaciesPoliticianNationalitySlugIn,
            "candidacies__politician__nationality__slug__regex": candidaciesPoliticianNationalitySlugRegex,
            "candidacies__politician__nationality__slug__gte": candidaciesPoliticianNationalitySlugGte,
            "candidacies__politician__nationality__slug__contains": candidaciesPoliticianNationalitySlugContains,
            "candidacies__politician__nationality__slug__lt": candidaciesPoliticianNationalitySlugLt,
            "candidacies__politician__nationality__slug__startswith": candidaciesPoliticianNationalitySlugStartswith,
            "candidacies__politician__nationality__slug__iendswith": candidaciesPoliticianNationalitySlugIendswith,
            "candidacies__politician__nationality__slug__icontains": candidaciesPoliticianNationalitySlugIcontains,
            "candidacies__politician__nationality__slug__iexact": candidaciesPoliticianNationalitySlugIexact,
            "candidacies__politician__nationality__slug": candidaciesPoliticianNationalitySlug,
            "candidacies__politician__nationality__slug__day": candidaciesPoliticianNationalitySlugDay,
            "candidacies__politician__nationality__slug__minute": candidaciesPoliticianNationalitySlugMinute,
            "candidacies__politician__nationality__slug__search": candidaciesPoliticianNationalitySlugSearch,
            "candidacies__politician__nationality__slug__hour": candidaciesPoliticianNationalitySlugHour,
            "candidacies__politician__nationality__slug__iregex": candidaciesPoliticianNationalitySlugIregex,
            "candidacies__politician__nationality__slug__endswith": candidaciesPoliticianNationalitySlugEndswith,
            "candidacies__politician__nationality__slug__range": candidaciesPoliticianNationalitySlugRange,
            "candidacies__politician__nationality__slug__istartswith": candidaciesPoliticianNationalitySlugIstartswith,
            "candidacies__politician__nationality__slug__lte": candidaciesPoliticianNationalitySlugLte,
            "candidacies__politician__nationality__gt": candidaciesPoliticianNationalityGt?.encodeToJSON(),
            "candidacies__politician__nationality__in": candidaciesPoliticianNationalityIn?.encodeToJSON(),
            "candidacies__politician__nationality__gte": candidaciesPoliticianNationalityGte?.encodeToJSON(),
            "candidacies__politician__nationality__lt": candidaciesPoliticianNationalityLt?.encodeToJSON(),
            "candidacies__politician__nationality__lte": candidaciesPoliticianNationalityLte?.encodeToJSON(),
            "candidacies__politician__nationality": candidaciesPoliticianNationality?.encodeToJSON(),
            "candidacies__politician__education__name__gt": candidaciesPoliticianEducationNameGt,
            "candidacies__politician__education__name__year": candidaciesPoliticianEducationNameYear,
            "candidacies__politician__education__name__month": candidaciesPoliticianEducationNameMonth,
            "candidacies__politician__education__name__isnull": candidaciesPoliticianEducationNameIsnull,
            "candidacies__politician__education__name__second": candidaciesPoliticianEducationNameSecond,
            "candidacies__politician__education__name__week_day": candidaciesPoliticianEducationNameWeekDay,
            "candidacies__politician__education__name__in": candidaciesPoliticianEducationNameIn,
            "candidacies__politician__education__name__regex": candidaciesPoliticianEducationNameRegex,
            "candidacies__politician__education__name__gte": candidaciesPoliticianEducationNameGte,
            "candidacies__politician__education__name__contains": candidaciesPoliticianEducationNameContains,
            "candidacies__politician__education__name__lt": candidaciesPoliticianEducationNameLt,
            "candidacies__politician__education__name__startswith": candidaciesPoliticianEducationNameStartswith,
            "candidacies__politician__education__name__iendswith": candidaciesPoliticianEducationNameIendswith,
            "candidacies__politician__education__name__icontains": candidaciesPoliticianEducationNameIcontains,
            "candidacies__politician__education__name__iexact": candidaciesPoliticianEducationNameIexact,
            "candidacies__politician__education__name": candidaciesPoliticianEducationName,
            "candidacies__politician__education__name__day": candidaciesPoliticianEducationNameDay,
            "candidacies__politician__education__name__minute": candidaciesPoliticianEducationNameMinute,
            "candidacies__politician__education__name__search": candidaciesPoliticianEducationNameSearch,
            "candidacies__politician__education__name__hour": candidaciesPoliticianEducationNameHour,
            "candidacies__politician__education__name__iregex": candidaciesPoliticianEducationNameIregex,
            "candidacies__politician__education__name__endswith": candidaciesPoliticianEducationNameEndswith,
            "candidacies__politician__education__name__range": candidaciesPoliticianEducationNameRange,
            "candidacies__politician__education__name__istartswith": candidaciesPoliticianEducationNameIstartswith,
            "candidacies__politician__education__name__lte": candidaciesPoliticianEducationNameLte,
            "candidacies__politician__education__gt": candidaciesPoliticianEducationGt?.encodeToJSON(),
            "candidacies__politician__education__in": candidaciesPoliticianEducationIn?.encodeToJSON(),
            "candidacies__politician__education__gte": candidaciesPoliticianEducationGte?.encodeToJSON(),
            "candidacies__politician__education__lt": candidaciesPoliticianEducationLt?.encodeToJSON(),
            "candidacies__politician__education__lte": candidaciesPoliticianEducationLte?.encodeToJSON(),
            "candidacies__politician__education": candidaciesPoliticianEducation?.encodeToJSON(),
            "candidacies__politician__ethnicity__name__gt": candidaciesPoliticianEthnicityNameGt,
            "candidacies__politician__ethnicity__name__year": candidaciesPoliticianEthnicityNameYear,
            "candidacies__politician__ethnicity__name__month": candidaciesPoliticianEthnicityNameMonth,
            "candidacies__politician__ethnicity__name__isnull": candidaciesPoliticianEthnicityNameIsnull,
            "candidacies__politician__ethnicity__name__second": candidaciesPoliticianEthnicityNameSecond,
            "candidacies__politician__ethnicity__name__week_day": candidaciesPoliticianEthnicityNameWeekDay,
            "candidacies__politician__ethnicity__name__in": candidaciesPoliticianEthnicityNameIn,
            "candidacies__politician__ethnicity__name__regex": candidaciesPoliticianEthnicityNameRegex,
            "candidacies__politician__ethnicity__name__gte": candidaciesPoliticianEthnicityNameGte,
            "candidacies__politician__ethnicity__name__contains": candidaciesPoliticianEthnicityNameContains,
            "candidacies__politician__ethnicity__name__lt": candidaciesPoliticianEthnicityNameLt,
            "candidacies__politician__ethnicity__name__startswith": candidaciesPoliticianEthnicityNameStartswith,
            "candidacies__politician__ethnicity__name__iendswith": candidaciesPoliticianEthnicityNameIendswith,
            "candidacies__politician__ethnicity__name__icontains": candidaciesPoliticianEthnicityNameIcontains,
            "candidacies__politician__ethnicity__name__iexact": candidaciesPoliticianEthnicityNameIexact
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politiciansIdGet(id: Int32, completion: @escaping ((_ error: Error?) -> Void)) {
        politiciansIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politicians/{id}
     - 
     
     - parameter id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func politiciansIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<Void> {
        var path = "/politicians/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func politiciansSearchGet(completion: @escaping ((_ error: Error?) -> Void)) {
        politiciansSearchGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /politicians/search
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func politiciansSearchGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/politicians/search"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func statesGet(completion: @escaping ((_ error: Error?) -> Void)) {
        statesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /states
     - 

     - returns: RequestBuilder<Void> 
     */
    open class func statesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/states"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
