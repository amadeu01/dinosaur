// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AlternativeNames]
        Decoders.addDecoder(clazz: [AlternativeNames].self) { (source: AnyObject) -> [AlternativeNames] in
            return Decoders.decode(clazz: [AlternativeNames].self, source: source)
        }
        // Decoder for AlternativeNames
        Decoders.addDecoder(clazz: AlternativeNames.self) { (source: AnyObject) -> AlternativeNames in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AlternativeNames()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }


        // Decoder for [Candidacies]
        Decoders.addDecoder(clazz: [Candidacies].self) { (source: AnyObject) -> [Candidacies] in
            return Decoders.decode(clazz: [Candidacies].self, source: source)
        }
        // Decoder for Candidacies
        Decoders.addDecoder(clazz: Candidacies.self) { (source: AnyObject) -> Candidacies in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Candidacies()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.politicalOffice = Decoders.decodeOptional(clazz: PoliticalOffice.self, source: sourceDictionary["political_office"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: City.self, source: sourceDictionary["city"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: State.self, source: sourceDictionary["state"] as AnyObject?)
            instance.institution = Decoders.decodeOptional(clazz: Institution.self, source: sourceDictionary["institution"] as AnyObject?)
            instance.elected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["elected"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.electionRound = Decoders.decodeOptional(clazz: ElectionRound.self, source: sourceDictionary["election_round"] as AnyObject?)
            instance.candidacyStatus = Decoders.decodeOptional(clazz: CandidacyStatus.self, source: sourceDictionary["candidacy_status"] as AnyObject?)
            instance.politician = Decoders.decodeOptional(clazz: Politician.self, source: sourceDictionary["politician"] as AnyObject?)
            return instance
        }


        // Decoder for [Candidacy]
        Decoders.addDecoder(clazz: [Candidacy].self) { (source: AnyObject) -> [Candidacy] in
            return Decoders.decode(clazz: [Candidacy].self, source: source)
        }
        // Decoder for Candidacy
        Decoders.addDecoder(clazz: Candidacy.self) { (source: AnyObject) -> Candidacy in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Candidacy()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.politicalOffice = Decoders.decodeOptional(clazz: PoliticalOffice.self, source: sourceDictionary["political_office"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: City.self, source: sourceDictionary["city"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: State.self, source: sourceDictionary["state"] as AnyObject?)
            instance.institution = Decoders.decodeOptional(clazz: Institution.self, source: sourceDictionary["institution"] as AnyObject?)
            instance.elected = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["elected"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.electionRound = Decoders.decodeOptional(clazz: ElectionRound.self, source: sourceDictionary["election_round"] as AnyObject?)
            instance.candidacyStatus = Decoders.decodeOptional(clazz: CandidacyStatus.self, source: sourceDictionary["candidacy_status"] as AnyObject?)
            return instance
        }


        // Decoder for [CandidacyStatus]
        Decoders.addDecoder(clazz: [CandidacyStatus].self) { (source: AnyObject) -> [CandidacyStatus] in
            return Decoders.decode(clazz: [CandidacyStatus].self, source: source)
        }
        // Decoder for CandidacyStatus
        Decoders.addDecoder(clazz: CandidacyStatus.self) { (source: AnyObject) -> CandidacyStatus in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CandidacyStatus()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }


        // Decoder for [City]
        Decoders.addDecoder(clazz: [City].self) { (source: AnyObject) -> [City] in
            return Decoders.decode(clazz: [City].self, source: source)
        }
        // Decoder for City
        Decoders.addDecoder(clazz: City.self) { (source: AnyObject) -> City in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = City()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: State.self, source: sourceDictionary["state"] as AnyObject?)
            return instance
        }


        // Decoder for [Country]
        Decoders.addDecoder(clazz: [Country].self) { (source: AnyObject) -> [Country] in
            return Decoders.decode(clazz: [Country].self, source: source)
        }
        // Decoder for Country
        Decoders.addDecoder(clazz: Country.self) { (source: AnyObject) -> Country in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Country()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            instance.siglum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siglum"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            return instance
        }


        // Decoder for [Education]
        Decoders.addDecoder(clazz: [Education].self) { (source: AnyObject) -> [Education] in
            return Decoders.decode(clazz: [Education].self, source: source)
        }
        // Decoder for Education
        Decoders.addDecoder(clazz: Education.self) { (source: AnyObject) -> Education in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Education()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }


        // Decoder for [ElectionRound]
        Decoders.addDecoder(clazz: [ElectionRound].self) { (source: AnyObject) -> [ElectionRound] in
            return Decoders.decode(clazz: [ElectionRound].self, source: source)
        }
        // Decoder for ElectionRound
        Decoders.addDecoder(clazz: ElectionRound.self) { (source: AnyObject) -> ElectionRound in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ElectionRound()
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.election = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["election"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.roundNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["round_number"] as AnyObject?)
            return instance
        }


        // Decoder for [Ethnicities]
        Decoders.addDecoder(clazz: [Ethnicities].self) { (source: AnyObject) -> [Ethnicities] in
            return Decoders.decode(clazz: [Ethnicities].self, source: source)
        }
        // Decoder for Ethnicities
        Decoders.addDecoder(clazz: Ethnicities.self) { (source: AnyObject) -> Ethnicities in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Ethnicities()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }


        // Decoder for [Events]
        Decoders.addDecoder(clazz: [Events].self) { (source: AnyObject) -> [Events] in
            return Decoders.decode(clazz: [Events].self, source: source)
        }
        // Decoder for Events
        Decoders.addDecoder(clazz: Events.self) { (source: AnyObject) -> Events in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Events()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.date = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date"] as AnyObject?)
            instance.politicianEventType = Decoders.decodeOptional(clazz: PoliticianEventType.self, source: sourceDictionary["politician_event_type"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse200]
        Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
            return Decoders.decode(clazz: [InlineResponse200].self, source: source)
        }
        // Decoder for InlineResponse200
        Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse200()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2001]
        Decoders.addDecoder(clazz: [InlineResponse2001].self) { (source: AnyObject) -> [InlineResponse2001] in
            return Decoders.decode(clazz: [InlineResponse2001].self, source: source)
        }
        // Decoder for InlineResponse2001
        Decoders.addDecoder(clazz: InlineResponse2001.self) { (source: AnyObject) -> InlineResponse2001 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2001()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2002]
        Decoders.addDecoder(clazz: [InlineResponse2002].self) { (source: AnyObject) -> [InlineResponse2002] in
            return Decoders.decode(clazz: [InlineResponse2002].self, source: source)
        }
        // Decoder for InlineResponse2002
        Decoders.addDecoder(clazz: InlineResponse2002.self) { (source: AnyObject) -> InlineResponse2002 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2002()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2003]
        Decoders.addDecoder(clazz: [InlineResponse2003].self) { (source: AnyObject) -> [InlineResponse2003] in
            return Decoders.decode(clazz: [InlineResponse2003].self, source: source)
        }
        // Decoder for InlineResponse2003
        Decoders.addDecoder(clazz: InlineResponse2003.self) { (source: AnyObject) -> InlineResponse2003 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2003()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2004]
        Decoders.addDecoder(clazz: [InlineResponse2004].self) { (source: AnyObject) -> [InlineResponse2004] in
            return Decoders.decode(clazz: [InlineResponse2004].self, source: source)
        }
        // Decoder for InlineResponse2004
        Decoders.addDecoder(clazz: InlineResponse2004.self) { (source: AnyObject) -> InlineResponse2004 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2004()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2005]
        Decoders.addDecoder(clazz: [InlineResponse2005].self) { (source: AnyObject) -> [InlineResponse2005] in
            return Decoders.decode(clazz: [InlineResponse2005].self, source: source)
        }
        // Decoder for InlineResponse2005
        Decoders.addDecoder(clazz: InlineResponse2005.self) { (source: AnyObject) -> InlineResponse2005 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2005()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse2006]
        Decoders.addDecoder(clazz: [InlineResponse2006].self) { (source: AnyObject) -> [InlineResponse2006] in
            return Decoders.decode(clazz: [InlineResponse2006].self, source: source)
        }
        // Decoder for InlineResponse2006
        Decoders.addDecoder(clazz: InlineResponse2006.self) { (source: AnyObject) -> InlineResponse2006 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse2006()
            instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"] as AnyObject?)
            instance.objects = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["objects"] as AnyObject?)
            return instance
        }


        // Decoder for [Institution]
        Decoders.addDecoder(clazz: [Institution].self) { (source: AnyObject) -> [Institution] in
            return Decoders.decode(clazz: [Institution].self, source: source)
        }
        // Decoder for Institution
        Decoders.addDecoder(clazz: Institution.self) { (source: AnyObject) -> Institution in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Institution()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.politicalOffices = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["political_offices"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"] as AnyObject?)
            instance.siglum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siglum"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            return instance
        }


        // Decoder for [Mandates]
        Decoders.addDecoder(clazz: [Mandates].self) { (source: AnyObject) -> [Mandates] in
            return Decoders.decode(clazz: [Mandates].self, source: source)
        }
        // Decoder for Mandates
        Decoders.addDecoder(clazz: Mandates.self) { (source: AnyObject) -> Mandates in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Mandates()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.events = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["events"] as AnyObject?)
            instance.candidacies = Decoders.decodeOptional(clazz: Candidacy.self, source: sourceDictionary["candidacies"] as AnyObject?)
            instance.dateEnd = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_end"] as AnyObject?)
            instance.dateStart = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_start"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }


        // Decoder for [MaritalStatus]
        Decoders.addDecoder(clazz: [MaritalStatus].self) { (source: AnyObject) -> [MaritalStatus] in
            return Decoders.decode(clazz: [MaritalStatus].self, source: source)
        }
        // Decoder for MaritalStatus
        Decoders.addDecoder(clazz: MaritalStatus.self) { (source: AnyObject) -> MaritalStatus in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MaritalStatus()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            return instance
        }


        // Decoder for [Meta]
        Decoders.addDecoder(clazz: [Meta].self) { (source: AnyObject) -> [Meta] in
            return Decoders.decode(clazz: [Meta].self, source: source)
        }
        // Decoder for Meta
        Decoders.addDecoder(clazz: Meta.self) { (source: AnyObject) -> Meta in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Meta()
            instance.previous = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["previous"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.next = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["next"] as AnyObject?)
            return instance
        }


        // Decoder for [Nationality]
        Decoders.addDecoder(clazz: [Nationality].self) { (source: AnyObject) -> [Nationality] in
            return Decoders.decode(clazz: [Nationality].self, source: source)
        }
        // Decoder for Nationality
        Decoders.addDecoder(clazz: Nationality.self) { (source: AnyObject) -> Nationality in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Nationality()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            return instance
        }


        // Decoder for [Occupation]
        Decoders.addDecoder(clazz: [Occupation].self) { (source: AnyObject) -> [Occupation] in
            return Decoders.decode(clazz: [Occupation].self, source: source)
        }
        // Decoder for Occupation
        Decoders.addDecoder(clazz: Occupation.self) { (source: AnyObject) -> Occupation in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Occupation()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            return instance
        }


        // Decoder for [PoliticalOffice]
        Decoders.addDecoder(clazz: [PoliticalOffice].self) { (source: AnyObject) -> [PoliticalOffice] in
            return Decoders.decode(clazz: [PoliticalOffice].self, source: source)
        }
        // Decoder for PoliticalOffice
        Decoders.addDecoder(clazz: PoliticalOffice.self) { (source: AnyObject) -> PoliticalOffice in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PoliticalOffice()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            instance.term = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["term"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            return instance
        }


        // Decoder for [PoliticalOffices]
        Decoders.addDecoder(clazz: [PoliticalOffices].self) { (source: AnyObject) -> [PoliticalOffices] in
            return Decoders.decode(clazz: [PoliticalOffices].self, source: source)
        }
        // Decoder for PoliticalOffices
        Decoders.addDecoder(clazz: PoliticalOffices.self) { (source: AnyObject) -> PoliticalOffices in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PoliticalOffices()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.term = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["term"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            return instance
        }


        // Decoder for [PoliticalParties]
        Decoders.addDecoder(clazz: [PoliticalParties].self) { (source: AnyObject) -> [PoliticalParties] in
            return Decoders.decode(clazz: [PoliticalParties].self, source: source)
        }
        // Decoder for PoliticalParties
        Decoders.addDecoder(clazz: PoliticalParties.self) { (source: AnyObject) -> PoliticalParties in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PoliticalParties()
            instance.dateEnd = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_end"] as AnyObject?)
            instance.dateStart = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_start"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.politicalParty = Decoders.decodeOptional(clazz: PoliticalParty.self, source: sourceDictionary["political_party"] as AnyObject?)
            return instance
        }


        // Decoder for [PoliticalParty]
        Decoders.addDecoder(clazz: [PoliticalParty].self) { (source: AnyObject) -> [PoliticalParty] in
            return Decoders.decode(clazz: [PoliticalParty].self, source: source)
        }
        // Decoder for PoliticalParty
        Decoders.addDecoder(clazz: PoliticalParty.self) { (source: AnyObject) -> PoliticalParty in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PoliticalParty()
            instance.foundedDate = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["founded_date"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.siglum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siglum"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.tseNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["tse_number"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"] as AnyObject?)
            return instance
        }


        // Decoder for [Politician]
        Decoders.addDecoder(clazz: [Politician].self) { (source: AnyObject) -> [Politician] in
            return Decoders.decode(clazz: [Politician].self, source: source)
        }
        // Decoder for Politician
        Decoders.addDecoder(clazz: Politician.self) { (source: AnyObject) -> Politician in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Politician()
            instance.about = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["about"] as AnyObject?)
            instance.candidacies = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["candidacies"] as AnyObject?)
            instance.alternativeNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["alternative_names"] as AnyObject?)
            instance.cpf = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cpf"] as AnyObject?)
            instance.dateOfBirth = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["date_of_birth"] as AnyObject?)
            instance.education = Decoders.decodeOptional(clazz: Education.self, source: sourceDictionary["education"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.ethnicity = Decoders.decodeOptional(clazz: Ethnicities.self, source: sourceDictionary["ethnicity"] as AnyObject?)
            instance.events = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["events"] as AnyObject?)
            instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.maritalStatus = Decoders.decodeOptional(clazz: MaritalStatus.self, source: sourceDictionary["marital_status"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.nationality = Decoders.decodeOptional(clazz: Nationality.self, source: sourceDictionary["nationality"] as AnyObject?)
            instance.occupation = Decoders.decodeOptional(clazz: Occupation.self, source: sourceDictionary["occupation"] as AnyObject?)
            instance.picture = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["picture"] as AnyObject?)
            instance.placeOfBirth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["place_of_birth"] as AnyObject?)
            instance.politicalParties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["political_parties"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: State.self, source: sourceDictionary["state"] as AnyObject?)
            instance.website = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["website"] as AnyObject?)
            return instance
        }


        // Decoder for [PoliticianEventType]
        Decoders.addDecoder(clazz: [PoliticianEventType].self) { (source: AnyObject) -> [PoliticianEventType] in
            return Decoders.decode(clazz: [PoliticianEventType].self, source: source)
        }
        // Decoder for PoliticianEventType
        Decoders.addDecoder(clazz: PoliticianEventType.self) { (source: AnyObject) -> PoliticianEventType in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PoliticianEventType()
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            return instance
        }


        // Decoder for [State]
        Decoders.addDecoder(clazz: [State].self) { (source: AnyObject) -> [State] in
            return Decoders.decode(clazz: [State].self, source: source)
        }
        // Decoder for State
        Decoders.addDecoder(clazz: State.self) { (source: AnyObject) -> State in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = State()
            instance.country = Decoders.decodeOptional(clazz: Country.self, source: sourceDictionary["country"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.id = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["id"] as AnyObject?)
            instance.logo = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo"] as AnyObject?)
            instance.siglum = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["siglum"] as AnyObject?)
            instance.slug = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["slug"] as AnyObject?)
            instance.wikipedia = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["wikipedia"] as AnyObject?)
            instance.resourceUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["resource_uri"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
